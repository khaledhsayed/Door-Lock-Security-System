
final_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00002bb4  00002c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080013a  0080013a  00002d22  2**0
                  ALLOC
  3 .stab         00002784  00000000  00000000  00002d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001078  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008419  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__vector_6>
      1c:	0c 94 95 13 	jmp	0x272a	; 0x272a <__vector_7>
      20:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 34       	cpi	r26, 0x4C	; 76
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <main>
      8a:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <newPassword>:
[in]:     NONE
[out]:    NONE
[Return]: NONE
 -------------------------------------------------------------------------------*/
void newPassword(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c0 54       	subi	r28, 0x40	; 64
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 i , matchingFlag = 0 ; /* flag to check matching of re-entered password with new one*/
     b60:	1b a6       	std	Y+43, r1	; 0x2b
     b62:	cd c1       	rjmp	.+922    	; 0xefe <newPassword+0x3b8>
	uint8 newPassword [10] , reEnteredPassword [10] ; /* arrays to store new and re-entered passwords*/

	/* loop that not exit from till matching occur */
	while(matchingFlag == 0)
	{
		matchingFlag = 1 ; /* initially matched and if it isn't this flag equal zero */
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	8b a7       	std	Y+43, r24	; 0x2b
		/*tell the user to "Enter New Password then go to next row */
		LCD_clearScreen() ;
     b68:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
		LCD_displayStringRowColumn(0 , 0 ,"Enter New Pass" );
     b6c:	20 e6       	ldi	r18, 0x60	; 96
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	a9 01       	movw	r20, r18
     b76:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
		LCD_goToRowColumn( 1 , 0 ) ;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_goToRowColumn>

		/* make the user to enter the new password*/
    	for(i = 0 ; i < 6 ; i++)
     b82:	1c a6       	std	Y+44, r1	; 0x2c
     b84:	85 c0       	rjmp	.+266    	; 0xc90 <newPassword+0x14a>
    	{
    		/* getting and store password from the keypad */
    		newPassword [i] = KeyPad_getPressedKey() ;
     b86:	8c a5       	ldd	r24, Y+44	; 0x2c
     b88:	08 2f       	mov	r16, r24
     b8a:	10 e0       	ldi	r17, 0x00	; 0
     b8c:	0e 94 42 0c 	call	0x1884	; 0x1884 <KeyPad_getPressedKey>
     b90:	28 2f       	mov	r18, r24
     b92:	ce 01       	movw	r24, r28
     b94:	8d 96       	adiw	r24, 0x2d	; 45
     b96:	fc 01       	movw	r30, r24
     b98:	e0 0f       	add	r30, r16
     b9a:	f1 1f       	adc	r31, r17
     b9c:	20 83       	st	Z, r18
    		LCD_displayString("*") ; /* show to user '*' at any password character */
     b9e:	8f e6       	ldi	r24, 0x6F	; 111
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_displayString>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	a8 ec       	ldi	r26, 0xC8	; 200
     bac:	b4 e4       	ldi	r27, 0x44	; 68
     bae:	8f a3       	std	Y+39, r24	; 0x27
     bb0:	98 a7       	std	Y+40, r25	; 0x28
     bb2:	a9 a7       	std	Y+41, r26	; 0x29
     bb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb6:	6f a1       	ldd	r22, Y+39	; 0x27
     bb8:	78 a5       	ldd	r23, Y+40	; 0x28
     bba:	89 a5       	ldd	r24, Y+41	; 0x29
     bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4a e7       	ldi	r20, 0x7A	; 122
     bc4:	53 e4       	ldi	r21, 0x43	; 67
     bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	8b a3       	std	Y+35, r24	; 0x23
     bd0:	9c a3       	std	Y+36, r25	; 0x24
     bd2:	ad a3       	std	Y+37, r26	; 0x25
     bd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bd6:	6b a1       	ldd	r22, Y+35	; 0x23
     bd8:	7c a1       	ldd	r23, Y+36	; 0x24
     bda:	8d a1       	ldd	r24, Y+37	; 0x25
     bdc:	9e a1       	ldd	r25, Y+38	; 0x26
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e8       	ldi	r20, 0x80	; 128
     be4:	5f e3       	ldi	r21, 0x3F	; 63
     be6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bea:	88 23       	and	r24, r24
     bec:	2c f4       	brge	.+10     	; 0xbf8 <newPassword+0xb2>
		__ticks = 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9a a3       	std	Y+34, r25	; 0x22
     bf4:	89 a3       	std	Y+33, r24	; 0x21
     bf6:	3f c0       	rjmp	.+126    	; 0xc76 <newPassword+0x130>
	else if (__tmp > 65535)
     bf8:	6b a1       	ldd	r22, Y+35	; 0x23
     bfa:	7c a1       	ldd	r23, Y+36	; 0x24
     bfc:	8d a1       	ldd	r24, Y+37	; 0x25
     bfe:	9e a1       	ldd	r25, Y+38	; 0x26
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	57 e4       	ldi	r21, 0x47	; 71
     c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	4c f5       	brge	.+82     	; 0xc62 <newPassword+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c10:	6f a1       	ldd	r22, Y+39	; 0x27
     c12:	78 a5       	ldd	r23, Y+40	; 0x28
     c14:	89 a5       	ldd	r24, Y+41	; 0x29
     c16:	9a a5       	ldd	r25, Y+42	; 0x2a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9a a3       	std	Y+34, r25	; 0x22
     c36:	89 a3       	std	Y+33, r24	; 0x21
     c38:	0f c0       	rjmp	.+30     	; 0xc58 <newPassword+0x112>
     c3a:	89 e1       	ldi	r24, 0x19	; 25
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	98 a3       	std	Y+32, r25	; 0x20
     c40:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c44:	98 a1       	ldd	r25, Y+32	; 0x20
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <newPassword+0x100>
     c4a:	98 a3       	std	Y+32, r25	; 0x20
     c4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4e:	89 a1       	ldd	r24, Y+33	; 0x21
     c50:	9a a1       	ldd	r25, Y+34	; 0x22
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	9a a3       	std	Y+34, r25	; 0x22
     c56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c58:	89 a1       	ldd	r24, Y+33	; 0x21
     c5a:	9a a1       	ldd	r25, Y+34	; 0x22
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	69 f7       	brne	.-38     	; 0xc3a <newPassword+0xf4>
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <newPassword+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c62:	6b a1       	ldd	r22, Y+35	; 0x23
     c64:	7c a1       	ldd	r23, Y+36	; 0x24
     c66:	8d a1       	ldd	r24, Y+37	; 0x25
     c68:	9e a1       	ldd	r25, Y+38	; 0x26
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	9a a3       	std	Y+34, r25	; 0x22
     c74:	89 a3       	std	Y+33, r24	; 0x21
     c76:	89 a1       	ldd	r24, Y+33	; 0x21
     c78:	9a a1       	ldd	r25, Y+34	; 0x22
     c7a:	9e 8f       	std	Y+30, r25	; 0x1e
     c7c:	8d 8f       	std	Y+29, r24	; 0x1d
     c7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <newPassword+0x13c>
     c86:	9e 8f       	std	Y+30, r25	; 0x1e
     c88:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen() ;
		LCD_displayStringRowColumn(0 , 0 ,"Enter New Pass" );
		LCD_goToRowColumn( 1 , 0 ) ;

		/* make the user to enter the new password*/
    	for(i = 0 ; i < 6 ; i++)
     c8a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	8c a7       	std	Y+44, r24	; 0x2c
     c90:	8c a5       	ldd	r24, Y+44	; 0x2c
     c92:	86 30       	cpi	r24, 0x06	; 6
     c94:	08 f4       	brcc	.+2      	; 0xc98 <newPassword+0x152>
     c96:	77 cf       	rjmp	.-274    	; 0xb86 <newPassword+0x40>
    		_delay_ms(1600) ; /* delay for debouncing */

    	}

    	/* telling the user to Re-enter the password for safety*/
    	LCD_clearScreen() ;
     c98:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
    	LCD_displayStringRowColumn(0 , 0 , "Re-Enter New Pass" );
     c9c:	21 e7       	ldi	r18, 0x71	; 113
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	a9 01       	movw	r20, r18
     ca6:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    	LCD_goToRowColumn( 1 , 0 ) ;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_goToRowColumn>
    	/* make the user to Re-enter the password for safety*/
    	for(i = 0 ; i < 6 ; i++)
     cb2:	1c a6       	std	Y+44, r1	; 0x2c
     cb4:	85 c0       	rjmp	.+266    	; 0xdc0 <newPassword+0x27a>
    	{
    		/* getting and store re-entered password from the keypad */
    		reEnteredPassword [i] = KeyPad_getPressedKey() ;
     cb6:	8c a5       	ldd	r24, Y+44	; 0x2c
     cb8:	08 2f       	mov	r16, r24
     cba:	10 e0       	ldi	r17, 0x00	; 0
     cbc:	0e 94 42 0c 	call	0x1884	; 0x1884 <KeyPad_getPressedKey>
     cc0:	28 2f       	mov	r18, r24
     cc2:	ce 01       	movw	r24, r28
     cc4:	c7 96       	adiw	r24, 0x37	; 55
     cc6:	fc 01       	movw	r30, r24
     cc8:	e0 0f       	add	r30, r16
     cca:	f1 1f       	adc	r31, r17
     ccc:	20 83       	st	Z, r18
    		LCD_displayString("*") ;/* show to user '*' at any password character */
     cce:	8f e6       	ldi	r24, 0x6F	; 111
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_displayString>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a8 ec       	ldi	r26, 0xC8	; 200
     cdc:	b4 e4       	ldi	r27, 0x44	; 68
     cde:	89 8f       	std	Y+25, r24	; 0x19
     ce0:	9a 8f       	std	Y+26, r25	; 0x1a
     ce2:	ab 8f       	std	Y+27, r26	; 0x1b
     ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce6:	69 8d       	ldd	r22, Y+25	; 0x19
     ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4a e7       	ldi	r20, 0x7A	; 122
     cf4:	53 e4       	ldi	r21, 0x43	; 67
     cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	8d 8b       	std	Y+21, r24	; 0x15
     d00:	9e 8b       	std	Y+22, r25	; 0x16
     d02:	af 8b       	std	Y+23, r26	; 0x17
     d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d06:	6d 89       	ldd	r22, Y+21	; 0x15
     d08:	7e 89       	ldd	r23, Y+22	; 0x16
     d0a:	8f 89       	ldd	r24, Y+23	; 0x17
     d0c:	98 8d       	ldd	r25, Y+24	; 0x18
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e8       	ldi	r20, 0x80	; 128
     d14:	5f e3       	ldi	r21, 0x3F	; 63
     d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	2c f4       	brge	.+10     	; 0xd28 <newPassword+0x1e2>
		__ticks = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	9c 8b       	std	Y+20, r25	; 0x14
     d24:	8b 8b       	std	Y+19, r24	; 0x13
     d26:	3f c0       	rjmp	.+126    	; 0xda6 <newPassword+0x260>
	else if (__tmp > 65535)
     d28:	6d 89       	ldd	r22, Y+21	; 0x15
     d2a:	7e 89       	ldd	r23, Y+22	; 0x16
     d2c:	8f 89       	ldd	r24, Y+23	; 0x17
     d2e:	98 8d       	ldd	r25, Y+24	; 0x18
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	4f e7       	ldi	r20, 0x7F	; 127
     d36:	57 e4       	ldi	r21, 0x47	; 71
     d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3c:	18 16       	cp	r1, r24
     d3e:	4c f5       	brge	.+82     	; 0xd92 <newPassword+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d40:	69 8d       	ldd	r22, Y+25	; 0x19
     d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	bc 01       	movw	r22, r24
     d5a:	cd 01       	movw	r24, r26
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	9c 8b       	std	Y+20, r25	; 0x14
     d66:	8b 8b       	std	Y+19, r24	; 0x13
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <newPassword+0x242>
     d6a:	89 e1       	ldi	r24, 0x19	; 25
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9a 8b       	std	Y+18, r25	; 0x12
     d70:	89 8b       	std	Y+17, r24	; 0x11
     d72:	89 89       	ldd	r24, Y+17	; 0x11
     d74:	9a 89       	ldd	r25, Y+18	; 0x12
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <newPassword+0x230>
     d7a:	9a 8b       	std	Y+18, r25	; 0x12
     d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	8b 89       	ldd	r24, Y+19	; 0x13
     d80:	9c 89       	ldd	r25, Y+20	; 0x14
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f7       	brne	.-38     	; 0xd6a <newPassword+0x224>
     d90:	14 c0       	rjmp	.+40     	; 0xdba <newPassword+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d92:	6d 89       	ldd	r22, Y+21	; 0x15
     d94:	7e 89       	ldd	r23, Y+22	; 0x16
     d96:	8f 89       	ldd	r24, Y+23	; 0x17
     d98:	98 8d       	ldd	r25, Y+24	; 0x18
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9c 8b       	std	Y+20, r25	; 0x14
     da4:	8b 8b       	std	Y+19, r24	; 0x13
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	98 8b       	std	Y+16, r25	; 0x10
     dac:	8f 87       	std	Y+15, r24	; 0x0f
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	98 89       	ldd	r25, Y+16	; 0x10
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <newPassword+0x26c>
     db6:	98 8b       	std	Y+16, r25	; 0x10
     db8:	8f 87       	std	Y+15, r24	; 0x0f
    	/* telling the user to Re-enter the password for safety*/
    	LCD_clearScreen() ;
    	LCD_displayStringRowColumn(0 , 0 , "Re-Enter New Pass" );
    	LCD_goToRowColumn( 1 , 0 ) ;
    	/* make the user to Re-enter the password for safety*/
    	for(i = 0 ; i < 6 ; i++)
     dba:	8c a5       	ldd	r24, Y+44	; 0x2c
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	8c a7       	std	Y+44, r24	; 0x2c
     dc0:	8c a5       	ldd	r24, Y+44	; 0x2c
     dc2:	86 30       	cpi	r24, 0x06	; 6
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <newPassword+0x282>
     dc6:	77 cf       	rjmp	.-274    	; 0xcb6 <newPassword+0x170>
    		LCD_displayString("*") ;/* show to user '*' at any password character */
    		_delay_ms(1600) ;/* delay for debouncing problems */

    	}
    	/* checking the matching between new password and Re-entered one  */
    	for(i = 0 ; i < 6 ; i++)
     dc8:	1c a6       	std	Y+44, r1	; 0x2c
     dca:	95 c0       	rjmp	.+298    	; 0xef6 <newPassword+0x3b0>
    	{
    		/* at any unmatched character then zero matching flag and do the while loop again*/
    		if(reEnteredPassword [i] != newPassword [i] )
     dcc:	8c a5       	ldd	r24, Y+44	; 0x2c
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	ce 01       	movw	r24, r28
     dd4:	c7 96       	adiw	r24, 0x37	; 55
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	40 81       	ld	r20, Z
     dde:	8c a5       	ldd	r24, Y+44	; 0x2c
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	ce 01       	movw	r24, r28
     de6:	8d 96       	adiw	r24, 0x2d	; 45
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	80 81       	ld	r24, Z
     df0:	48 17       	cp	r20, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <newPassword+0x2b0>
     df4:	7d c0       	rjmp	.+250    	; 0xef0 <newPassword+0x3aa>
    		{
    	    	LCD_clearScreen() ;
     df6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
    	    	LCD_displayStringRowColumn(0 , 0 ,"Unmatched! again" );
     dfa:	23 e8       	ldi	r18, 0x83	; 131
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	a9 01       	movw	r20, r18
     e04:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e6       	ldi	r25, 0x60	; 96
     e0c:	aa ee       	ldi	r26, 0xEA	; 234
     e0e:	b6 e4       	ldi	r27, 0x46	; 70
     e10:	8b 87       	std	Y+11, r24	; 0x0b
     e12:	9c 87       	std	Y+12, r25	; 0x0c
     e14:	ad 87       	std	Y+13, r26	; 0x0d
     e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e18:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	4a e7       	ldi	r20, 0x7A	; 122
     e26:	53 e4       	ldi	r21, 0x43	; 67
     e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	8f 83       	std	Y+7, r24	; 0x07
     e32:	98 87       	std	Y+8, r25	; 0x08
     e34:	a9 87       	std	Y+9, r26	; 0x09
     e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e38:	6f 81       	ldd	r22, Y+7	; 0x07
     e3a:	78 85       	ldd	r23, Y+8	; 0x08
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	2c f4       	brge	.+10     	; 0xe5a <newPassword+0x314>
		__ticks = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	3f c0       	rjmp	.+126    	; 0xed8 <newPassword+0x392>
	else if (__tmp > 65535)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	4c f5       	brge	.+82     	; 0xec4 <newPassword+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	51 e4       	ldi	r21, 0x41	; 65
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <newPassword+0x374>
     e9c:	89 e1       	ldi	r24, 0x19	; 25
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <newPassword+0x362>
     eac:	9c 83       	std	Y+4, r25	; 0x04
     eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	69 f7       	brne	.-38     	; 0xe9c <newPassword+0x356>
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <newPassword+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec4:	6f 81       	ldd	r22, Y+7	; 0x07
     ec6:	78 85       	ldd	r23, Y+8	; 0x08
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <newPassword+0x39e>
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
    	    	_delay_ms(30000) ;
    			matchingFlag  = 0 ;
     eec:	1b a6       	std	Y+43, r1	; 0x2b
     eee:	07 c0       	rjmp	.+14     	; 0xefe <newPassword+0x3b8>
    		LCD_displayString("*") ;/* show to user '*' at any password character */
    		_delay_ms(1600) ;/* delay for debouncing problems */

    	}
    	/* checking the matching between new password and Re-entered one  */
    	for(i = 0 ; i < 6 ; i++)
     ef0:	8c a5       	ldd	r24, Y+44	; 0x2c
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	8c a7       	std	Y+44, r24	; 0x2c
     ef6:	8c a5       	ldd	r24, Y+44	; 0x2c
     ef8:	86 30       	cpi	r24, 0x06	; 6
     efa:	08 f4       	brcc	.+2      	; 0xefe <newPassword+0x3b8>
     efc:	67 cf       	rjmp	.-306    	; 0xdcc <newPassword+0x286>
{
	uint8 i , matchingFlag = 0 ; /* flag to check matching of re-entered password with new one*/
	uint8 newPassword [10] , reEnteredPassword [10] ; /* arrays to store new and re-entered passwords*/

	/* loop that not exit from till matching occur */
	while(matchingFlag == 0)
     efe:	8b a5       	ldd	r24, Y+43	; 0x2b
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <newPassword+0x3c0>
     f04:	2f ce       	rjmp	.-930    	; 0xb64 <newPassword+0x1e>

	}

	/* after matching then copying password to the global array
	 * and putting '#' for UART_recieveByte technique*/
	for(i = 0 ; i < 6 ; i++)
     f06:	1c a6       	std	Y+44, r1	; 0x2c
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <newPassword+0x3ea>
	{
		g_password[i] = newPassword [i] ;
     f0a:	8c a5       	ldd	r24, Y+44	; 0x2c
     f0c:	48 2f       	mov	r20, r24
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	8c a5       	ldd	r24, Y+44	; 0x2c
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	ce 01       	movw	r24, r28
     f18:	8d 96       	adiw	r24, 0x2d	; 45
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	80 81       	ld	r24, Z
     f22:	fa 01       	movw	r30, r20
     f24:	ee 5b       	subi	r30, 0xBE	; 190
     f26:	fe 4f       	sbci	r31, 0xFE	; 254
     f28:	80 83       	st	Z, r24

	}

	/* after matching then copying password to the global array
	 * and putting '#' for UART_recieveByte technique*/
	for(i = 0 ; i < 6 ; i++)
     f2a:	8c a5       	ldd	r24, Y+44	; 0x2c
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	8c a7       	std	Y+44, r24	; 0x2c
     f30:	8c a5       	ldd	r24, Y+44	; 0x2c
     f32:	86 30       	cpi	r24, 0x06	; 6
     f34:	50 f3       	brcs	.-44     	; 0xf0a <newPassword+0x3c4>
	{
		g_password[i] = newPassword [i] ;
	}
	g_password[i] = '#' ;
     f36:	8c a5       	ldd	r24, Y+44	; 0x2c
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	ee 5b       	subi	r30, 0xBE	; 190
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	83 e2       	ldi	r24, 0x23	; 35
     f44:	80 83       	st	Z, r24

	/* function to send password using UART */
	sendPasswordToMC2() ;
     f46:	0e 94 b1 07 	call	0xf62	; 0xf62 <sendPasswordToMC2>

}
     f4a:	c0 5c       	subi	r28, 0xC0	; 192
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <sendPasswordToMC2>:
[in]:     NONE
[out]:    NONE
[Return]: NONE
 -------------------------------------------------------------------------------*/
void sendPasswordToMC2(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	/* two Micro-controllers tells to us that they are ready
	 * for synchronization between them*/
	UART_sendByte(MC1_READY) ;
     f6a:	8e ef       	ldi	r24, 0xFE	; 254
     f6c:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>
	while(UART_recieveByte() != MC2_READY); // wait until MC2 is ready
     f70:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
     f74:	8f 3f       	cpi	r24, 0xFF	; 255
     f76:	e1 f7       	brne	.-8      	; 0xf70 <sendPasswordToMC2+0xe>
	UART_sendString(g_password) ;
     f78:	82 e4       	ldi	r24, 0x42	; 66
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_sendString>
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <isPasswordThenAction>:
[in]:     a_keyPressed : the key-pressed from user
[out]:    NONE
[Return]: NONE
 -------------------------------------------------------------------------------*/
void isPasswordThenAction(uint8 a_keyPressed)
{
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	ce 54       	subi	r28, 0x4E	; 78
     f94:	d0 40       	sbci	r29, 0x00	; 0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	fe 01       	movw	r30, r28
     fa2:	ec 5b       	subi	r30, 0xBC	; 188
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 83       	st	Z, r24
	/* matching flag for check matching entered password with saved one
	 * and wrong counter for counting till 3 wrong passwords enters */
	uint8 i , matchingFlag = 0 , wrongCounter = 0  ;
     fa8:	1c a6       	std	Y+44, r1	; 0x2c
     faa:	1b a6       	std	Y+43, r1	; 0x2b
	/* array to save entered password from user*/
	uint8 enteredPassword[10];

	/* two micro-controllers tells to us that they are ready
	 * for synchronization between them*/
   	while(UART_recieveByte() != MC2_READY); // wait until MC2 is ready
     fac:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
     fb0:	8f 3f       	cpi	r24, 0xFF	; 255
     fb2:	e1 f7       	brne	.-8      	; 0xfac <isPasswordThenAction+0x26>
	UART_sendByte(MC1_READY) ;
     fb4:	8e ef       	ldi	r24, 0xFE	; 254
     fb6:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>
	UART_receiveString(g_password) ;
     fba:	82 e4       	ldi	r24, 0x42	; 66
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_receiveString>

	/* LCD shows waiting for readability of the program*/
	LCD_clearScreen() ;
     fc2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0 , 0 , "waiting...") ;
     fc6:	24 e9       	ldi	r18, 0x94	; 148
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e6       	ldi	r25, 0x60	; 96
     fd8:	aa ee       	ldi	r26, 0xEA	; 234
     fda:	b6 e4       	ldi	r27, 0x46	; 70
     fdc:	8f a3       	std	Y+39, r24	; 0x27
     fde:	98 a7       	std	Y+40, r25	; 0x28
     fe0:	a9 a7       	std	Y+41, r26	; 0x29
     fe2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6f a1       	ldd	r22, Y+39	; 0x27
     fe6:	78 a5       	ldd	r23, Y+40	; 0x28
     fe8:	89 a5       	ldd	r24, Y+41	; 0x29
     fea:	9a a5       	ldd	r25, Y+42	; 0x2a
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a e7       	ldi	r20, 0x7A	; 122
     ff2:	53 e4       	ldi	r21, 0x43	; 67
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8b a3       	std	Y+35, r24	; 0x23
     ffe:	9c a3       	std	Y+36, r25	; 0x24
    1000:	ad a3       	std	Y+37, r26	; 0x25
    1002:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1004:	6b a1       	ldd	r22, Y+35	; 0x23
    1006:	7c a1       	ldd	r23, Y+36	; 0x24
    1008:	8d a1       	ldd	r24, Y+37	; 0x25
    100a:	9e a1       	ldd	r25, Y+38	; 0x26
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <isPasswordThenAction+0xa0>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a a3       	std	Y+34, r25	; 0x22
    1022:	89 a3       	std	Y+33, r24	; 0x21
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <isPasswordThenAction+0x11e>
	else if (__tmp > 65535)
    1026:	6b a1       	ldd	r22, Y+35	; 0x23
    1028:	7c a1       	ldd	r23, Y+36	; 0x24
    102a:	8d a1       	ldd	r24, Y+37	; 0x25
    102c:	9e a1       	ldd	r25, Y+38	; 0x26
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <isPasswordThenAction+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6f a1       	ldd	r22, Y+39	; 0x27
    1040:	78 a5       	ldd	r23, Y+40	; 0x28
    1042:	89 a5       	ldd	r24, Y+41	; 0x29
    1044:	9a a5       	ldd	r25, Y+42	; 0x2a
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9a a3       	std	Y+34, r25	; 0x22
    1064:	89 a3       	std	Y+33, r24	; 0x21
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <isPasswordThenAction+0x100>
    1068:	89 e1       	ldi	r24, 0x19	; 25
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	98 a3       	std	Y+32, r25	; 0x20
    106e:	8f 8f       	std	Y+31, r24	; 0x1f
    1070:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1072:	98 a1       	ldd	r25, Y+32	; 0x20
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <isPasswordThenAction+0xee>
    1078:	98 a3       	std	Y+32, r25	; 0x20
    107a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	89 a1       	ldd	r24, Y+33	; 0x21
    107e:	9a a1       	ldd	r25, Y+34	; 0x22
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9a a3       	std	Y+34, r25	; 0x22
    1084:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	89 a1       	ldd	r24, Y+33	; 0x21
    1088:	9a a1       	ldd	r25, Y+34	; 0x22
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <isPasswordThenAction+0xe2>
    108e:	4b c1       	rjmp	.+662    	; 0x1326 <isPasswordThenAction+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6b a1       	ldd	r22, Y+35	; 0x23
    1092:	7c a1       	ldd	r23, Y+36	; 0x24
    1094:	8d a1       	ldd	r24, Y+37	; 0x25
    1096:	9e a1       	ldd	r25, Y+38	; 0x26
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9a a3       	std	Y+34, r25	; 0x22
    10a2:	89 a3       	std	Y+33, r24	; 0x21
    10a4:	89 a1       	ldd	r24, Y+33	; 0x21
    10a6:	9a a1       	ldd	r25, Y+34	; 0x22
    10a8:	9e 8f       	std	Y+30, r25	; 0x1e
    10aa:	8d 8f       	std	Y+29, r24	; 0x1d
    10ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <isPasswordThenAction+0x12a>
    10b4:	9e 8f       	std	Y+30, r25	; 0x1e
    10b6:	8d 8f       	std	Y+29, r24	; 0x1d
    10b8:	36 c1       	rjmp	.+620    	; 0x1326 <isPasswordThenAction+0x3a0>
	_delay_ms(30000);

	/* loop that not exit from till matching occur or 3 wrong tries */
	while((matchingFlag == 0) && (wrongCounter < 3))
	{
		matchingFlag = 1 ;/* initially matched and if it isn't this flag equal zero */
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	8c a7       	std	Y+44, r24	; 0x2c

		/*tell the user to "Enter old Password then go to next row in LCD*/
    	LCD_clearScreen() ;
    10be:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
		LCD_displayStringRowColumn(0 , 0 , "Enter Old Pass") ;
    10c2:	2f e9       	ldi	r18, 0x9F	; 159
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	a9 01       	movw	r20, r18
    10cc:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
		LCD_goToRowColumn( 1 , 0 ) ;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_goToRowColumn>

   		/* getting and store entered password from the keypad */
		for(i = 0 ; i < 6 ; i++)
    10d8:	1d a6       	std	Y+45, r1	; 0x2d
    10da:	85 c0       	rjmp	.+266    	; 0x11e6 <isPasswordThenAction+0x260>
		{
			enteredPassword [i] = KeyPad_getPressedKey() ;
    10dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    10de:	08 2f       	mov	r16, r24
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	0e 94 42 0c 	call	0x1884	; 0x1884 <KeyPad_getPressedKey>
    10e6:	28 2f       	mov	r18, r24
    10e8:	ce 01       	movw	r24, r28
    10ea:	8e 96       	adiw	r24, 0x2e	; 46
    10ec:	fc 01       	movw	r30, r24
    10ee:	e0 0f       	add	r30, r16
    10f0:	f1 1f       	adc	r31, r17
    10f2:	20 83       	st	Z, r18
			LCD_displayString("*") ;
    10f4:	8f e6       	ldi	r24, 0x6F	; 111
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_displayString>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a8 ec       	ldi	r26, 0xC8	; 200
    1102:	b4 e4       	ldi	r27, 0x44	; 68
    1104:	89 8f       	std	Y+25, r24	; 0x19
    1106:	9a 8f       	std	Y+26, r25	; 0x1a
    1108:	ab 8f       	std	Y+27, r26	; 0x1b
    110a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	69 8d       	ldd	r22, Y+25	; 0x19
    110e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	4a e7       	ldi	r20, 0x7A	; 122
    111a:	53 e4       	ldi	r21, 0x43	; 67
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8d 8b       	std	Y+21, r24	; 0x15
    1126:	9e 8b       	std	Y+22, r25	; 0x16
    1128:	af 8b       	std	Y+23, r26	; 0x17
    112a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    112c:	6d 89       	ldd	r22, Y+21	; 0x15
    112e:	7e 89       	ldd	r23, Y+22	; 0x16
    1130:	8f 89       	ldd	r24, Y+23	; 0x17
    1132:	98 8d       	ldd	r25, Y+24	; 0x18
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <isPasswordThenAction+0x1c8>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9c 8b       	std	Y+20, r25	; 0x14
    114a:	8b 8b       	std	Y+19, r24	; 0x13
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <isPasswordThenAction+0x246>
	else if (__tmp > 65535)
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <isPasswordThenAction+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	69 8d       	ldd	r22, Y+25	; 0x19
    1168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    116c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9c 8b       	std	Y+20, r25	; 0x14
    118c:	8b 8b       	std	Y+19, r24	; 0x13
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <isPasswordThenAction+0x228>
    1190:	89 e1       	ldi	r24, 0x19	; 25
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9a 8b       	std	Y+18, r25	; 0x12
    1196:	89 8b       	std	Y+17, r24	; 0x11
    1198:	89 89       	ldd	r24, Y+17	; 0x11
    119a:	9a 89       	ldd	r25, Y+18	; 0x12
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <isPasswordThenAction+0x216>
    11a0:	9a 8b       	std	Y+18, r25	; 0x12
    11a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8b 89       	ldd	r24, Y+19	; 0x13
    11a6:	9c 89       	ldd	r25, Y+20	; 0x14
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9c 8b       	std	Y+20, r25	; 0x14
    11ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8b 89       	ldd	r24, Y+19	; 0x13
    11b0:	9c 89       	ldd	r25, Y+20	; 0x14
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <isPasswordThenAction+0x20a>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <isPasswordThenAction+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ba:	7e 89       	ldd	r23, Y+22	; 0x16
    11bc:	8f 89       	ldd	r24, Y+23	; 0x17
    11be:	98 8d       	ldd	r25, Y+24	; 0x18
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	98 8b       	std	Y+16, r25	; 0x10
    11d2:	8f 87       	std	Y+15, r24	; 0x0f
    11d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d6:	98 89       	ldd	r25, Y+16	; 0x10
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <isPasswordThenAction+0x252>
    11dc:	98 8b       	std	Y+16, r25	; 0x10
    11de:	8f 87       	std	Y+15, r24	; 0x0f
    	LCD_clearScreen() ;
		LCD_displayStringRowColumn(0 , 0 , "Enter Old Pass") ;
		LCD_goToRowColumn( 1 , 0 ) ;

   		/* getting and store entered password from the keypad */
		for(i = 0 ; i < 6 ; i++)
    11e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	8d a7       	std	Y+45, r24	; 0x2d
    11e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    11e8:	86 30       	cpi	r24, 0x06	; 6
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <isPasswordThenAction+0x268>
    11ec:	77 cf       	rjmp	.-274    	; 0x10dc <isPasswordThenAction+0x156>
			LCD_displayString("*") ;
			_delay_ms(1600) ;

		}
		/* checking the matching between entered password from user and saved onr */
	   	for(i = 0 ; i < 6 ; i++)
    11ee:	1d a6       	std	Y+45, r1	; 0x2d
    11f0:	96 c0       	rjmp	.+300    	; 0x131e <isPasswordThenAction+0x398>
	    {
	   		/* at any unmatched character then zero matching flag
	   		 * and do the while loop again*/
	    	if(enteredPassword [i] != g_password [i] )
    11f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	ce 01       	movw	r24, r28
    11fa:	8e 96       	adiw	r24, 0x2e	; 46
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	20 81       	ld	r18, Z
    1204:	8d a5       	ldd	r24, Y+45	; 0x2d
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	fc 01       	movw	r30, r24
    120c:	ee 5b       	subi	r30, 0xBE	; 190
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	80 81       	ld	r24, Z
    1212:	28 17       	cp	r18, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <isPasswordThenAction+0x292>
    1216:	80 c0       	rjmp	.+256    	; 0x1318 <isPasswordThenAction+0x392>
	    	{
	    	    LCD_clearScreen() ;
    1218:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
	    	    LCD_displayStringRowColumn(0 , 0 ,"Wrong Password!" );
    121c:	2e ea       	ldi	r18, 0xAE	; 174
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e6       	ldi	r25, 0x60	; 96
    122e:	aa ee       	ldi	r26, 0xEA	; 234
    1230:	b6 e4       	ldi	r27, 0x46	; 70
    1232:	8b 87       	std	Y+11, r24	; 0x0b
    1234:	9c 87       	std	Y+12, r25	; 0x0c
    1236:	ad 87       	std	Y+13, r26	; 0x0d
    1238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	6b 85       	ldd	r22, Y+11	; 0x0b
    123c:	7c 85       	ldd	r23, Y+12	; 0x0c
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4a e7       	ldi	r20, 0x7A	; 122
    1248:	53 e4       	ldi	r21, 0x43	; 67
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8f 83       	std	Y+7, r24	; 0x07
    1254:	98 87       	std	Y+8, r25	; 0x08
    1256:	a9 87       	std	Y+9, r26	; 0x09
    1258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <isPasswordThenAction+0x2f6>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <isPasswordThenAction+0x374>
	else if (__tmp > 65535)
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	57 e4       	ldi	r21, 0x47	; 71
    128c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1290:	18 16       	cp	r1, r24
    1292:	4c f5       	brge	.+82     	; 0x12e6 <isPasswordThenAction+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	7c 85       	ldd	r23, Y+12	; 0x0c
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <isPasswordThenAction+0x356>
    12be:	89 e1       	ldi	r24, 0x19	; 25
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <isPasswordThenAction+0x344>
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <isPasswordThenAction+0x338>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <isPasswordThenAction+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <isPasswordThenAction+0x380>
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
	    	    _delay_ms(30000) ;
	    	    wrongCounter++ ;
    130e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	8b a7       	std	Y+43, r24	; 0x2b
	    		matchingFlag  = 0 ;
    1314:	1c a6       	std	Y+44, r1	; 0x2c
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <isPasswordThenAction+0x3a0>
			LCD_displayString("*") ;
			_delay_ms(1600) ;

		}
		/* checking the matching between entered password from user and saved onr */
	   	for(i = 0 ; i < 6 ; i++)
    1318:	8d a5       	ldd	r24, Y+45	; 0x2d
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	8d a7       	std	Y+45, r24	; 0x2d
    131e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1320:	86 30       	cpi	r24, 0x06	; 6
    1322:	08 f4       	brcc	.+2      	; 0x1326 <isPasswordThenAction+0x3a0>
    1324:	66 cf       	rjmp	.-308    	; 0x11f2 <isPasswordThenAction+0x26c>
	LCD_clearScreen() ;
	LCD_displayStringRowColumn(0 , 0 , "waiting...") ;
	_delay_ms(30000);

	/* loop that not exit from till matching occur or 3 wrong tries */
	while((matchingFlag == 0) && (wrongCounter < 3))
    1326:	8c a5       	ldd	r24, Y+44	; 0x2c
    1328:	88 23       	and	r24, r24
    132a:	21 f4       	brne	.+8      	; 0x1334 <isPasswordThenAction+0x3ae>
    132c:	8b a5       	ldd	r24, Y+43	; 0x2b
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	08 f4       	brcc	.+2      	; 0x1334 <isPasswordThenAction+0x3ae>
    1332:	c3 ce       	rjmp	.-634    	; 0x10ba <isPasswordThenAction+0x134>
	    }


	}
	/* if the reason of exiting from the while loop was because of 3 times wrong entering */
	if(wrongCounter >= 3)
    1334:	8b a5       	ldd	r24, Y+43	; 0x2b
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	08 f4       	brcc	.+2      	; 0x133c <isPasswordThenAction+0x3b6>
    133a:	5b c0       	rjmp	.+182    	; 0x13f2 <isPasswordThenAction+0x46c>
	{

		/* two micro-controllers tells to us that they are ready
		 * for synchronization between them*/
		UART_sendByte(MC1_READY) ;
    133c:	8e ef       	ldi	r24, 0xFE	; 254
    133e:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>
		while(UART_recieveByte() != MC2_READY); // wait until MC2 is ready
    1342:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
    1346:	8f 3f       	cpi	r24, 0xFF	; 255
    1348:	e1 f7       	brne	.-8      	; 0x1342 <isPasswordThenAction+0x3bc>
		/* send to micro-controller 2 to switch on the buzzer for 1 minute*/
		UART_sendByte(BUZZER) ;
    134a:	8d ef       	ldi	r24, 0xFD	; 253
    134c:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>

		/* display on LCD that it is a thief for more safety */
	    LCD_clearScreen() ;
    1350:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
	    LCD_displayStringRowColumn(0 , 0 ,"Thief!!!" );
    1354:	2e eb       	ldi	r18, 0xBE	; 190
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
	     * 2. initial value = 0
	     * 3. compare A value = 0 (unused)
	     * 4. compare B value = 0 (unused)
	     * 5. Duty Cycle value = 0 (unused)
	     * 6. Pre-scalar = 64 */
		Timer1_OVF_setCallBack(buzzerTermination) ;
    1362:	89 e7       	ldi	r24, 0x79	; 121
    1364:	9a e0       	ldi	r25, 0x0A	; 10
    1366:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <Timer1_OVF_setCallBack>
	    TIMER1_ConfigType TIMER1_config = { OVERFLOW , 0 , 0  , 0 ,0 , F_CPU_64} ;
    136a:	ce 01       	movw	r24, r28
    136c:	c8 96       	adiw	r24, 0x38	; 56
    136e:	27 96       	adiw	r28, 0x07	; 7
    1370:	9f af       	std	Y+63, r25	; 0x3f
    1372:	8e af       	std	Y+62, r24	; 0x3e
    1374:	27 97       	sbiw	r28, 0x07	; 7
    1376:	ee e2       	ldi	r30, 0x2E	; 46
    1378:	f1 e0       	ldi	r31, 0x01	; 1
    137a:	29 96       	adiw	r28, 0x09	; 9
    137c:	ff af       	std	Y+63, r31	; 0x3f
    137e:	ee af       	std	Y+62, r30	; 0x3e
    1380:	29 97       	sbiw	r28, 0x09	; 9
    1382:	f6 e0       	ldi	r31, 0x06	; 6
    1384:	2a 96       	adiw	r28, 0x0a	; 10
    1386:	ff af       	std	Y+63, r31	; 0x3f
    1388:	2a 97       	sbiw	r28, 0x0a	; 10
    138a:	29 96       	adiw	r28, 0x09	; 9
    138c:	ee ad       	ldd	r30, Y+62	; 0x3e
    138e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1390:	29 97       	sbiw	r28, 0x09	; 9
    1392:	00 80       	ld	r0, Z
    1394:	29 96       	adiw	r28, 0x09	; 9
    1396:	8e ad       	ldd	r24, Y+62	; 0x3e
    1398:	9f ad       	ldd	r25, Y+63	; 0x3f
    139a:	29 97       	sbiw	r28, 0x09	; 9
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	29 96       	adiw	r28, 0x09	; 9
    13a0:	9f af       	std	Y+63, r25	; 0x3f
    13a2:	8e af       	std	Y+62, r24	; 0x3e
    13a4:	29 97       	sbiw	r28, 0x09	; 9
    13a6:	27 96       	adiw	r28, 0x07	; 7
    13a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    13aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    13ac:	27 97       	sbiw	r28, 0x07	; 7
    13ae:	00 82       	st	Z, r0
    13b0:	27 96       	adiw	r28, 0x07	; 7
    13b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    13b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    13b6:	27 97       	sbiw	r28, 0x07	; 7
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	27 96       	adiw	r28, 0x07	; 7
    13bc:	9f af       	std	Y+63, r25	; 0x3f
    13be:	8e af       	std	Y+62, r24	; 0x3e
    13c0:	27 97       	sbiw	r28, 0x07	; 7
    13c2:	2a 96       	adiw	r28, 0x0a	; 10
    13c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    13c6:	2a 97       	sbiw	r28, 0x0a	; 10
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	2a 96       	adiw	r28, 0x0a	; 10
    13cc:	9f af       	std	Y+63, r25	; 0x3f
    13ce:	2a 97       	sbiw	r28, 0x0a	; 10
    13d0:	2a 96       	adiw	r28, 0x0a	; 10
    13d2:	ef ad       	ldd	r30, Y+63	; 0x3f
    13d4:	2a 97       	sbiw	r28, 0x0a	; 10
    13d6:	ee 23       	and	r30, r30
    13d8:	c1 f6       	brne	.-80     	; 0x138a <isPasswordThenAction+0x404>
	    TIMER1_init(&TIMER1_config ) ;
    13da:	ce 01       	movw	r24, r28
    13dc:	c8 96       	adiw	r24, 0x38	; 56
    13de:	0e 94 04 12 	call	0x2408	; 0x2408 <TIMER1_init>

	    /* entering while loop for delaying till 1 minute passes
	     * then zero the flag from buzzerTermination function */
	    g_delayFlag = 1 ;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 3a 01 	sts	0x013A, r24
	    while(g_delayFlag == 1) ;
    13e8:	80 91 3a 01 	lds	r24, 0x013A
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	e1 f3       	breq	.-8      	; 0x13e8 <isPasswordThenAction+0x462>
    13f0:	74 c0       	rjmp	.+232    	; 0x14da <isPasswordThenAction+0x554>
	}
	/* if the reason of exiting from the while loop was because of password is correct
	 * and operation is changing password by '*' pressing */
	else if (a_keyPressed == '*')
    13f2:	fe 01       	movw	r30, r28
    13f4:	ec 5b       	subi	r30, 0xBC	; 188
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	80 81       	ld	r24, Z
    13fa:	8a 32       	cpi	r24, 0x2A	; 42
    13fc:	69 f4       	brne	.+26     	; 0x1418 <isPasswordThenAction+0x492>
	{
		/* two micro-controllers tells to us that they are ready
		 * for synchronization between them*/
		UART_sendByte(MC1_READY) ;
    13fe:	8e ef       	ldi	r24, 0xFE	; 254
    1400:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>
		while(UART_recieveByte() != MC2_READY); // wait until MC2 is ready
    1404:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
    1408:	8f 3f       	cpi	r24, 0xFF	; 255
    140a:	e1 f7       	brne	.-8      	; 0x1404 <isPasswordThenAction+0x47e>
		UART_sendByte(NEW_PASSWORD) ; /* send to MC2 that there will be new password to save in EEPROM*/
    140c:	8b ef       	ldi	r24, 0xFB	; 251
    140e:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>

		/* changing password of the system again*/
		newPassword() ;
    1412:	0e 94 a3 05 	call	0xb46	; 0xb46 <newPassword>
    1416:	61 c0       	rjmp	.+194    	; 0x14da <isPasswordThenAction+0x554>
	}
	/* if the reason of exiting from the while loop was because of password is correct
	 * and operation is opening the door by '%' pressing */
	else if(a_keyPressed == '%')
    1418:	fe 01       	movw	r30, r28
    141a:	ec 5b       	subi	r30, 0xBC	; 188
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	85 32       	cpi	r24, 0x25	; 37
    1422:	09 f0       	breq	.+2      	; 0x1426 <isPasswordThenAction+0x4a0>
    1424:	5a c0       	rjmp	.+180    	; 0x14da <isPasswordThenAction+0x554>
	{
		/* two micro-controllers tells to us that they are ready
		 * for synchronization between them*/
		UART_sendByte(MC1_READY) ;
    1426:	8e ef       	ldi	r24, 0xFE	; 254
    1428:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>
		while(UART_recieveByte() != MC2_READY); // wait until MC2 is ready
    142c:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
    1430:	8f 3f       	cpi	r24, 0xFF	; 255
    1432:	e1 f7       	brne	.-8      	; 0x142c <isPasswordThenAction+0x4a6>
		UART_sendByte(DOOR) ;
    1434:	8c ef       	ldi	r24, 0xFC	; 252
    1436:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>

		/*display the status of the door in the fuction doorOperation */
	    LCD_clearScreen() ;
    143a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
	    LCD_displayStringRowColumn(0 , 0 ,"DOOR IS :" );
    143e:	27 ec       	ldi	r18, 0xC7	; 199
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	a9 01       	movw	r20, r18
    1448:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
	     * 2. initial value = 0
	     * 3. compare A value = 0 (unused)
	     * 4. compare B value = 0 (unused)
	     * 5. Duty Cycle value = 0 (unused)
	     * 6. Pre-scalar = 64 */
	    Timer1_OVF_setCallBack(doorOperations) ;
    144c:	85 e2       	ldi	r24, 0x25	; 37
    144e:	9b e0       	ldi	r25, 0x0B	; 11
    1450:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <Timer1_OVF_setCallBack>
	    TIMER1_ConfigType TIMER1_config = { OVERFLOW , 0 , 0  , 0 ,0 , F_CPU_64} ;
    1454:	ce 01       	movw	r24, r28
    1456:	ce 96       	adiw	r24, 0x3e	; 62
    1458:	2c 96       	adiw	r28, 0x0c	; 12
    145a:	9f af       	std	Y+63, r25	; 0x3f
    145c:	8e af       	std	Y+62, r24	; 0x3e
    145e:	2c 97       	sbiw	r28, 0x0c	; 12
    1460:	e8 e2       	ldi	r30, 0x28	; 40
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	2e 96       	adiw	r28, 0x0e	; 14
    1466:	ff af       	std	Y+63, r31	; 0x3f
    1468:	ee af       	std	Y+62, r30	; 0x3e
    146a:	2e 97       	sbiw	r28, 0x0e	; 14
    146c:	f6 e0       	ldi	r31, 0x06	; 6
    146e:	2f 96       	adiw	r28, 0x0f	; 15
    1470:	ff af       	std	Y+63, r31	; 0x3f
    1472:	2f 97       	sbiw	r28, 0x0f	; 15
    1474:	2e 96       	adiw	r28, 0x0e	; 14
    1476:	ee ad       	ldd	r30, Y+62	; 0x3e
    1478:	ff ad       	ldd	r31, Y+63	; 0x3f
    147a:	2e 97       	sbiw	r28, 0x0e	; 14
    147c:	00 80       	ld	r0, Z
    147e:	2e 96       	adiw	r28, 0x0e	; 14
    1480:	8e ad       	ldd	r24, Y+62	; 0x3e
    1482:	9f ad       	ldd	r25, Y+63	; 0x3f
    1484:	2e 97       	sbiw	r28, 0x0e	; 14
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	2e 96       	adiw	r28, 0x0e	; 14
    148a:	9f af       	std	Y+63, r25	; 0x3f
    148c:	8e af       	std	Y+62, r24	; 0x3e
    148e:	2e 97       	sbiw	r28, 0x0e	; 14
    1490:	2c 96       	adiw	r28, 0x0c	; 12
    1492:	ee ad       	ldd	r30, Y+62	; 0x3e
    1494:	ff ad       	ldd	r31, Y+63	; 0x3f
    1496:	2c 97       	sbiw	r28, 0x0c	; 12
    1498:	00 82       	st	Z, r0
    149a:	2c 96       	adiw	r28, 0x0c	; 12
    149c:	8e ad       	ldd	r24, Y+62	; 0x3e
    149e:	9f ad       	ldd	r25, Y+63	; 0x3f
    14a0:	2c 97       	sbiw	r28, 0x0c	; 12
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	2c 96       	adiw	r28, 0x0c	; 12
    14a6:	9f af       	std	Y+63, r25	; 0x3f
    14a8:	8e af       	std	Y+62, r24	; 0x3e
    14aa:	2c 97       	sbiw	r28, 0x0c	; 12
    14ac:	2f 96       	adiw	r28, 0x0f	; 15
    14ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    14b0:	2f 97       	sbiw	r28, 0x0f	; 15
    14b2:	91 50       	subi	r25, 0x01	; 1
    14b4:	2f 96       	adiw	r28, 0x0f	; 15
    14b6:	9f af       	std	Y+63, r25	; 0x3f
    14b8:	2f 97       	sbiw	r28, 0x0f	; 15
    14ba:	2f 96       	adiw	r28, 0x0f	; 15
    14bc:	ef ad       	ldd	r30, Y+63	; 0x3f
    14be:	2f 97       	sbiw	r28, 0x0f	; 15
    14c0:	ee 23       	and	r30, r30
    14c2:	c1 f6       	brne	.-80     	; 0x1474 <isPasswordThenAction+0x4ee>
	    TIMER1_init(&TIMER1_config ) ;
    14c4:	ce 01       	movw	r24, r28
    14c6:	ce 96       	adiw	r24, 0x3e	; 62
    14c8:	0e 94 04 12 	call	0x2408	; 0x2408 <TIMER1_init>

	    /* entering while loop for delaying till door is opening and closing
	     * then zero the flag from buzzerTermination function */
	    g_delayFlag = 1 ;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	80 93 3a 01 	sts	0x013A, r24
	    while(g_delayFlag == 1) ;
    14d2:	80 91 3a 01 	lds	r24, 0x013A
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	e1 f3       	breq	.-8      	; 0x14d2 <isPasswordThenAction+0x54c>
	}


}
    14da:	c2 5b       	subi	r28, 0xB2	; 178
    14dc:	df 4f       	sbci	r29, 0xFF	; 255
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <buzzerTermination>:
[in]:     NONE
[out]:    NONE
[Return]: NONE
 -------------------------------------------------------------------------------*/
void buzzerTermination(void)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2e 97       	sbiw	r28, 0x0e	; 14
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61

	g_ticks++ ; /* No. of overflows of TIMER1 */
    1506:	80 91 3b 01 	lds	r24, 0x013B
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	80 93 3b 01 	sts	0x013B, r24
	LCD_displayStringRowColumn(1 , 0 ,"Catch him" );
    1510:	21 ed       	ldi	r18, 0xD1	; 209
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
	SET_BIT(SREG , 7) ; /*AVR maybe clear this bit after interrupt
    151e:	af e5       	ldi	r26, 0x5F	; 95
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ef e5       	ldi	r30, 0x5F	; 95
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 68       	ori	r24, 0x80	; 128
    152a:	8c 93       	st	X, r24
	 then open it manually again */

	/*every tick (overflow) takes 0.5 sec then it is 1 minute */
	if(g_ticks >=120)
    152c:	80 91 3b 01 	lds	r24, 0x013B
    1530:	88 37       	cpi	r24, 0x78	; 120
    1532:	08 f4       	brcc	.+2      	; 0x1536 <buzzerTermination+0x44>
    1534:	81 c0       	rjmp	.+258    	; 0x1638 <buzzerTermination+0x146>
	{
	  	LCD_clearScreen() ;
    1536:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
		LCD_displayStringRowColumn(1 , 0 ,"Try again" );
    153a:	2b ed       	ldi	r18, 0xDB	; 219
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e4       	ldi	r25, 0x40	; 64
    154c:	ac e1       	ldi	r26, 0x1C	; 28
    154e:	b6 e4       	ldi	r27, 0x46	; 70
    1550:	8b 87       	std	Y+11, r24	; 0x0b
    1552:	9c 87       	std	Y+12, r25	; 0x0c
    1554:	ad 87       	std	Y+13, r26	; 0x0d
    1556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6b 85       	ldd	r22, Y+11	; 0x0b
    155a:	7c 85       	ldd	r23, Y+12	; 0x0c
    155c:	8d 85       	ldd	r24, Y+13	; 0x0d
    155e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8f 83       	std	Y+7, r24	; 0x07
    1572:	98 87       	std	Y+8, r25	; 0x08
    1574:	a9 87       	std	Y+9, r26	; 0x09
    1576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <buzzerTermination+0xa8>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <buzzerTermination+0x126>
	else if (__tmp > 65535)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <buzzerTermination+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <buzzerTermination+0x108>
    15dc:	89 e1       	ldi	r24, 0x19	; 25
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 83       	std	Y+4, r25	; 0x04
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <buzzerTermination+0xf6>
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <buzzerTermination+0xea>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <buzzerTermination+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <buzzerTermination+0x132>
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10000) ;

		/*zero the delay to exit from the while loop of delaying */
		g_delayFlag = 0 ;
    162c:	10 92 3a 01 	sts	0x013A, r1
		g_ticks = 0 ; /* zero the ticks for any other interrupt*/
    1630:	10 92 3b 01 	sts	0x013B, r1
		Timer1_DeInit(); /* de-activate the timer*/
    1634:	0e 94 09 13 	call	0x2612	; 0x2612 <Timer1_DeInit>

	}

}
    1638:	2e 96       	adiw	r28, 0x0e	; 14
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <doorOperations>:
[in]:     NONE
[out]:    NONE
[Return]: NONE
 -------------------------------------------------------------------------------*/
void doorOperations(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	2e 97       	sbiw	r28, 0x0e	; 14
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61

	g_ticks++ ;/* No. of overflows of TIMER1 */
    165e:	80 91 3b 01 	lds	r24, 0x013B
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 3b 01 	sts	0x013B, r24
	SET_BIT(SREG , 7) ; /*AVR maybe clear this bit after interrupt
    1668:	af e5       	ldi	r26, 0x5F	; 95
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ef e5       	ldi	r30, 0x5F	; 95
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 68       	ori	r24, 0x80	; 128
    1674:	8c 93       	st	X, r24
	then open it manually again */

	/*every tick (overflow) takes 0.5 second then
	 * at first 15 seconds door is opening */
	if(g_ticks < 30)
    1676:	80 91 3b 01 	lds	r24, 0x013B
    167a:	8e 31       	cpi	r24, 0x1E	; 30
    167c:	40 f4       	brcc	.+16     	; 0x168e <doorOperations+0x44>
	{
		LCD_displayStringRowColumn(1 , 0 ,"opening" );
    167e:	25 ee       	ldi	r18, 0xE5	; 229
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    168c:	9e c0       	rjmp	.+316    	; 0x17ca <doorOperations+0x180>
	}
	/* the door holds for 3 seconds */
	else if(g_ticks < 36)
    168e:	80 91 3b 01 	lds	r24, 0x013B
    1692:	84 32       	cpi	r24, 0x24	; 36
    1694:	40 f4       	brcc	.+16     	; 0x16a6 <doorOperations+0x5c>
	{
		LCD_displayStringRowColumn(1 , 0 ,"holding" );
    1696:	2d ee       	ldi	r18, 0xED	; 237
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	a9 01       	movw	r20, r18
    16a0:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    16a4:	92 c0       	rjmp	.+292    	; 0x17ca <doorOperations+0x180>
	}
	/* the last 15 seconds door is closing */
	else if(g_ticks < 66)
    16a6:	80 91 3b 01 	lds	r24, 0x013B
    16aa:	82 34       	cpi	r24, 0x42	; 66
    16ac:	40 f4       	brcc	.+16     	; 0x16be <doorOperations+0x74>
	{
		LCD_displayStringRowColumn(1 , 0 ,"closing" );
    16ae:	25 ef       	ldi	r18, 0xF5	; 245
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    16bc:	86 c0       	rjmp	.+268    	; 0x17ca <doorOperations+0x180>
	}
	/*after 15 + 3 + 15 seconds operation is done */
	else if(g_ticks >= 66)
    16be:	80 91 3b 01 	lds	r24, 0x013B
    16c2:	82 34       	cpi	r24, 0x42	; 66
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <doorOperations+0x7e>
    16c6:	81 c0       	rjmp	.+258    	; 0x17ca <doorOperations+0x180>
	{
	  	LCD_clearScreen() ;
    16c8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
		LCD_displayStringRowColumn(1 , 0 ,"Done" );
    16cc:	2d ef       	ldi	r18, 0xFD	; 253
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	a9 01       	movw	r20, r18
    16d6:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e4       	ldi	r25, 0x40	; 64
    16de:	ac e1       	ldi	r26, 0x1C	; 28
    16e0:	b6 e4       	ldi	r27, 0x46	; 70
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	9c 87       	std	Y+12, r25	; 0x0c
    16e6:	ad 87       	std	Y+13, r26	; 0x0d
    16e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a e7       	ldi	r20, 0x7A	; 122
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8f 83       	std	Y+7, r24	; 0x07
    1704:	98 87       	std	Y+8, r25	; 0x08
    1706:	a9 87       	std	Y+9, r26	; 0x09
    1708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <doorOperations+0xe2>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <doorOperations+0x160>
	else if (__tmp > 65535)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <doorOperations+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	0f c0       	rjmp	.+30     	; 0x178c <doorOperations+0x142>
    176e:	89 e1       	ldi	r24, 0x19	; 25
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <doorOperations+0x130>
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <doorOperations+0x124>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <doorOperations+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <doorOperations+0x16c>
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10000) ;

		/*zero the delay to exit from the while loop of delaying */
		g_delayFlag = 0 ;
    17be:	10 92 3a 01 	sts	0x013A, r1
		g_ticks = 0 ; /* zero the ticks for any other interrupt*/
    17c2:	10 92 3b 01 	sts	0x013B, r1
		Timer1_DeInit(); /* de-activate the timer*/
    17c6:	0e 94 09 13 	call	0x2612	; 0x2612 <Timer1_DeInit>
	}

}
    17ca:	2e 96       	adiw	r28, 0x0e	; 14
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <main>:

int main(void)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	2b 97       	sbiw	r28, 0x0b	; 11
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
	uint8 keyPressed ; /* holds the pressing of even '*' or '%'*/
	LCD_init() ; /*initialization of LCD */
    17f0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_init>
	 * 2. baud rate of 9600
	 * 3. disable parity bit
	 * 4. one stop bit
	 *
	 * then send structure of configuration to the driver*/
	Uart_ConfigType UART_config = {8 , 9600 ,DISABLED , ONE_STOP_BIT };
    17f4:	ce 01       	movw	r24, r28
    17f6:	02 96       	adiw	r24, 0x02	; 2
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	8f 83       	std	Y+7, r24	; 0x07
    17fc:	e4 e3       	ldi	r30, 0x34	; 52
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	fa 87       	std	Y+10, r31	; 0x0a
    1802:	e9 87       	std	Y+9, r30	; 0x09
    1804:	f5 e0       	ldi	r31, 0x05	; 5
    1806:	fb 87       	std	Y+11, r31	; 0x0b
    1808:	e9 85       	ldd	r30, Y+9	; 0x09
    180a:	fa 85       	ldd	r31, Y+10	; 0x0a
    180c:	00 80       	ld	r0, Z
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	9a 87       	std	Y+10, r25	; 0x0a
    1816:	89 87       	std	Y+9, r24	; 0x09
    1818:	ef 81       	ldd	r30, Y+7	; 0x07
    181a:	f8 85       	ldd	r31, Y+8	; 0x08
    181c:	00 82       	st	Z, r0
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	98 87       	std	Y+8, r25	; 0x08
    1826:	8f 83       	std	Y+7, r24	; 0x07
    1828:	9b 85       	ldd	r25, Y+11	; 0x0b
    182a:	91 50       	subi	r25, 0x01	; 1
    182c:	9b 87       	std	Y+11, r25	; 0x0b
    182e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1830:	ee 23       	and	r30, r30
    1832:	51 f7       	brne	.-44     	; 0x1808 <main+0x2c>
	UART_init(&UART_config) ; /* */
    1834:	ce 01       	movw	r24, r28
    1836:	02 96       	adiw	r24, 0x02	; 2
    1838:	0e 94 c8 13 	call	0x2790	; 0x2790 <UART_init>

	newPassword(); /* first time password */
    183c:	0e 94 a3 05 	call	0xb46	; 0xb46 <newPassword>

	SET_BIT(SREG , 7) ; /*enabling global interrupt bit */
    1840:	af e5       	ldi	r26, 0x5F	; 95
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ef e5       	ldi	r30, 0x5F	; 95
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	8c 93       	st	X, r24

	/*the application is even change password or open the door */
    while(1)
    {
    	/* display options of application*/
    	LCD_displayStringRowColumn(0 , 0 , " *: Change Pass") ;
    184e:	22 e0       	ldi	r18, 0x02	; 2
    1850:	31 e0       	ldi	r19, 0x01	; 1
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	a9 01       	movw	r20, r18
    1858:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>
    	LCD_displayStringRowColumn(1 , 0 , " %: Open Door") ;
    185c:	22 e1       	ldi	r18, 0x12	; 18
    185e:	31 e0       	ldi	r19, 0x01	; 1
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	0e 94 be 11 	call	0x237c	; 0x237c <LCD_displayStringRowColumn>

    	/*waiting tell even '*' or '%' pressing */
    	keyPressed = KeyPad_getPressedKey();
    186a:	0e 94 42 0c 	call	0x1884	; 0x1884 <KeyPad_getPressedKey>
    186e:	89 83       	std	Y+1, r24	; 0x01
    	if(keyPressed == '*' || keyPressed == '%' )
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	8a 32       	cpi	r24, 0x2A	; 42
    1874:	19 f0       	breq	.+6      	; 0x187c <main+0xa0>
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	85 32       	cpi	r24, 0x25	; 37
    187a:	49 f7       	brne	.-46     	; 0x184e <main+0x72>
    	{
    		/*after pressing checking that it is the user from password
    		 * then do the action needed */
    		isPasswordThenAction(keyPressed);
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	0e 94 c3 07 	call	0xf86	; 0xf86 <isPasswordThenAction>
    1882:	e5 cf       	rjmp	.-54     	; 0x184e <main+0x72>

00001884 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <KeyPad_getPressedKey+0x6>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	4c c0       	rjmp	.+152    	; 0x192a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1892:	ea e3       	ldi	r30, 0x3A	; 58
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	80 e1       	ldi	r24, 0x10	; 16
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <KeyPad_getPressedKey+0x22>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	2a 95       	dec	r18
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <KeyPad_getPressedKey+0x1e>
    18aa:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	80 e1       	ldi	r24, 0x10	; 16
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <KeyPad_getPressedKey+0x3e>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <KeyPad_getPressedKey+0x3a>
    18c6:	80 95       	com	r24
    18c8:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    18ca:	19 82       	std	Y+1, r1	; 0x01
    18cc:	28 c0       	rjmp	.+80     	; 0x191e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    18ce:	e9 e3       	ldi	r30, 0x39	; 57
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a9 01       	movw	r20, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <KeyPad_getPressedKey+0x62>
    18e2:	55 95       	asr	r21
    18e4:	47 95       	ror	r20
    18e6:	8a 95       	dec	r24
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <KeyPad_getPressedKey+0x5e>
    18ea:	ca 01       	movw	r24, r20
    18ec:	81 70       	andi	r24, 0x01	; 1
    18ee:	90 70       	andi	r25, 0x00	; 0
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	91 f4       	brne	.+36     	; 0x1918 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	98 2f       	mov	r25, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	89 0f       	add	r24, r25
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	84 30       	cpi	r24, 0x04	; 4
    1922:	a8 f2       	brcs	.-86     	; 0x18ce <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	8a 83       	std	Y+2, r24	; 0x02
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	08 f4       	brcc	.+2      	; 0x1932 <KeyPad_getPressedKey+0xae>
    1930:	b0 cf       	rjmp	.-160    	; 0x1892 <KeyPad_getPressedKey+0xe>
    1932:	ad cf       	rjmp	.-166    	; 0x188e <KeyPad_getPressedKey+0xa>

00001934 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <KeyPad_4x4_adjustKeyNumber+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <KeyPad_4x4_adjustKeyNumber+0x8>
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3c 83       	std	Y+4, r19	; 0x04
    194a:	2b 83       	std	Y+3, r18	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	91 05       	cpc	r25, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <KeyPad_4x4_adjustKeyNumber+0x24>
    1956:	70 c0       	rjmp	.+224    	; 0x1a38 <KeyPad_4x4_adjustKeyNumber+0x104>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	29 30       	cpi	r18, 0x09	; 9
    195e:	31 05       	cpc	r19, r1
    1960:	5c f5       	brge	.+86     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x84>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <KeyPad_4x4_adjustKeyNumber+0x3a>
    196c:	59 c0       	rjmp	.+178    	; 0x1a20 <KeyPad_4x4_adjustKeyNumber+0xec>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	25 30       	cpi	r18, 0x05	; 5
    1974:	31 05       	cpc	r19, r1
    1976:	9c f4       	brge	.+38     	; 0x199e <KeyPad_4x4_adjustKeyNumber+0x6a>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <KeyPad_4x4_adjustKeyNumber+0x50>
    1982:	48 c0       	rjmp	.+144    	; 0x1a14 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	3c 81       	ldd	r19, Y+4	; 0x04
    1988:	23 30       	cpi	r18, 0x03	; 3
    198a:	31 05       	cpc	r19, r1
    198c:	0c f0       	brlt	.+2      	; 0x1990 <KeyPad_4x4_adjustKeyNumber+0x5c>
    198e:	45 c0       	rjmp	.+138    	; 0x1a1a <KeyPad_4x4_adjustKeyNumber+0xe6>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <KeyPad_4x4_adjustKeyNumber+0x68>
    199a:	39 c0       	rjmp	.+114    	; 0x1a0e <KeyPad_4x4_adjustKeyNumber+0xda>
    199c:	67 c0       	rjmp	.+206    	; 0x1a6c <KeyPad_4x4_adjustKeyNumber+0x138>
    199e:	2b 81       	ldd	r18, Y+3	; 0x03
    19a0:	3c 81       	ldd	r19, Y+4	; 0x04
    19a2:	26 30       	cpi	r18, 0x06	; 6
    19a4:	31 05       	cpc	r19, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <KeyPad_4x4_adjustKeyNumber+0x76>
    19a8:	41 c0       	rjmp	.+130    	; 0x1a2c <KeyPad_4x4_adjustKeyNumber+0xf8>
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	87 30       	cpi	r24, 0x07	; 7
    19b0:	91 05       	cpc	r25, r1
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <KeyPad_4x4_adjustKeyNumber+0x82>
    19b4:	3e c0       	rjmp	.+124    	; 0x1a32 <KeyPad_4x4_adjustKeyNumber+0xfe>
    19b6:	37 c0       	rjmp	.+110    	; 0x1a26 <KeyPad_4x4_adjustKeyNumber+0xf2>
    19b8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ba:	3c 81       	ldd	r19, Y+4	; 0x04
    19bc:	2c 30       	cpi	r18, 0x0C	; 12
    19be:	31 05       	cpc	r19, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <KeyPad_4x4_adjustKeyNumber+0x90>
    19c2:	46 c0       	rjmp	.+140    	; 0x1a50 <KeyPad_4x4_adjustKeyNumber+0x11c>
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	8d 30       	cpi	r24, 0x0D	; 13
    19ca:	91 05       	cpc	r25, r1
    19cc:	5c f4       	brge	.+22     	; 0x19e4 <KeyPad_4x4_adjustKeyNumber+0xb0>
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	3c 81       	ldd	r19, Y+4	; 0x04
    19d2:	2a 30       	cpi	r18, 0x0A	; 10
    19d4:	31 05       	cpc	r19, r1
    19d6:	b1 f1       	breq	.+108    	; 0x1a44 <KeyPad_4x4_adjustKeyNumber+0x110>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	8b 30       	cpi	r24, 0x0B	; 11
    19de:	91 05       	cpc	r25, r1
    19e0:	a4 f5       	brge	.+104    	; 0x1a4a <KeyPad_4x4_adjustKeyNumber+0x116>
    19e2:	2d c0       	rjmp	.+90     	; 0x1a3e <KeyPad_4x4_adjustKeyNumber+0x10a>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	2e 30       	cpi	r18, 0x0E	; 14
    19ea:	31 05       	cpc	r19, r1
    19ec:	b9 f1       	breq	.+110    	; 0x1a5c <KeyPad_4x4_adjustKeyNumber+0x128>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	8e 30       	cpi	r24, 0x0E	; 14
    19f4:	91 05       	cpc	r25, r1
    19f6:	7c f1       	brlt	.+94     	; 0x1a56 <KeyPad_4x4_adjustKeyNumber+0x122>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	2f 30       	cpi	r18, 0x0F	; 15
    19fe:	31 05       	cpc	r19, r1
    1a00:	79 f1       	breq	.+94     	; 0x1a60 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	80 31       	cpi	r24, 0x10	; 16
    1a08:	91 05       	cpc	r25, r1
    1a0a:	69 f1       	breq	.+90     	; 0x1a66 <KeyPad_4x4_adjustKeyNumber+0x132>
    1a0c:	2f c0       	rjmp	.+94     	; 0x1a6c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1a0e:	97 e0       	ldi	r25, 0x07	; 7
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	2e c0       	rjmp	.+92     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1a14:	28 e0       	ldi	r18, 0x08	; 8
    1a16:	2a 83       	std	Y+2, r18	; 0x02
    1a18:	2b c0       	rjmp	.+86     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1a1a:	39 e0       	ldi	r19, 0x09	; 9
    1a1c:	3a 83       	std	Y+2, r19	; 0x02
    1a1e:	28 c0       	rjmp	.+80     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1a20:	85 e2       	ldi	r24, 0x25	; 37
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	25 c0       	rjmp	.+74     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	22 c0       	rjmp	.+68     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1a2c:	25 e0       	ldi	r18, 0x05	; 5
    1a2e:	2a 83       	std	Y+2, r18	; 0x02
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1a32:	36 e0       	ldi	r19, 0x06	; 6
    1a34:	3a 83       	std	Y+2, r19	; 0x02
    1a36:	1c c0       	rjmp	.+56     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1a38:	8a e2       	ldi	r24, 0x2A	; 42
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
    1a3c:	19 c0       	rjmp	.+50     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	16 c0       	rjmp	.+44     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1a44:	22 e0       	ldi	r18, 0x02	; 2
    1a46:	2a 83       	std	Y+2, r18	; 0x02
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1a4a:	33 e0       	ldi	r19, 0x03	; 3
    1a4c:	3a 83       	std	Y+2, r19	; 0x02
    1a4e:	10 c0       	rjmp	.+32     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1a50:	8d e2       	ldi	r24, 0x2D	; 45
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1a56:	9d e0       	ldi	r25, 0x0D	; 13
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1a5c:	1a 82       	std	Y+2, r1	; 0x02
    1a5e:	08 c0       	rjmp	.+16     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1a60:	2d e3       	ldi	r18, 0x3D	; 61
    1a62:	2a 83       	std	Y+2, r18	; 0x02
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1a66:	3b e2       	ldi	r19, 0x2B	; 43
    1a68:	3a 83       	std	Y+2, r19	; 0x02
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1a88:	e4 e3       	ldi	r30, 0x34	; 52
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1a90:	a1 e3       	ldi	r26, 0x31	; 49
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e1 e3       	ldi	r30, 0x31	; 49
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 6b       	ori	r24, 0xB0	; 176
    1a9c:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1a9e:	88 e3       	ldi	r24, 0x38	; 56
    1aa0:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1aa4:	8c e0       	ldi	r24, 0x0C	; 12
    1aa6:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_sendCommand>
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	e9 97       	sbiw	r28, 0x39	; 57
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1acc:	a2 e3       	ldi	r26, 0x32	; 50
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e2 e3       	ldi	r30, 0x32	; 50
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 7e       	andi	r24, 0xEF	; 239
    1ad8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1ada:	a2 e3       	ldi	r26, 0x32	; 50
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e2 e3       	ldi	r30, 0x32	; 50
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 7d       	andi	r24, 0xDF	; 223
    1ae6:	8c 93       	st	X, r24
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e8       	ldi	r26, 0x80	; 128
    1aee:	bf e3       	ldi	r27, 0x3F	; 63
    1af0:	8d ab       	std	Y+53, r24	; 0x35
    1af2:	9e ab       	std	Y+54, r25	; 0x36
    1af4:	af ab       	std	Y+55, r26	; 0x37
    1af6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6d a9       	ldd	r22, Y+53	; 0x35
    1afa:	7e a9       	ldd	r23, Y+54	; 0x36
    1afc:	8f a9       	ldd	r24, Y+55	; 0x37
    1afe:	98 ad       	ldd	r25, Y+56	; 0x38
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	89 ab       	std	Y+49, r24	; 0x31
    1b12:	9a ab       	std	Y+50, r25	; 0x32
    1b14:	ab ab       	std	Y+51, r26	; 0x33
    1b16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b18:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_sendCommand+0x84>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	98 ab       	std	Y+48, r25	; 0x30
    1b36:	8f a7       	std	Y+47, r24	; 0x2f
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1b3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b40:	9c a9       	ldd	r25, Y+52	; 0x34
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6d a9       	ldd	r22, Y+53	; 0x35
    1b54:	7e a9       	ldd	r23, Y+54	; 0x36
    1b56:	8f a9       	ldd	r24, Y+55	; 0x37
    1b58:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	98 ab       	std	Y+48, r25	; 0x30
    1b78:	8f a7       	std	Y+47, r24	; 0x2f
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_sendCommand+0xe4>
    1b7c:	89 e1       	ldi	r24, 0x19	; 25
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e a7       	std	Y+46, r25	; 0x2e
    1b82:	8d a7       	std	Y+45, r24	; 0x2d
    1b84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_sendCommand+0xd2>
    1b8c:	9e a7       	std	Y+46, r25	; 0x2e
    1b8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b92:	98 a9       	ldd	r25, Y+48	; 0x30
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_sendCommand+0xc6>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    1baa:	9c a9       	ldd	r25, Y+52	; 0x34
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	9c a7       	std	Y+44, r25	; 0x2c
    1bbe:	8b a7       	std	Y+43, r24	; 0x2b
    1bc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_sendCommand+0x10e>
    1bc8:	9c a7       	std	Y+44, r25	; 0x2c
    1bca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bcc:	a2 e3       	ldi	r26, 0x32	; 50
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e2 e3       	ldi	r30, 0x32	; 50
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 68       	ori	r24, 0x80	; 128
    1bd8:	8c 93       	st	X, r24
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8f a3       	std	Y+39, r24	; 0x27
    1be4:	98 a7       	std	Y+40, r25	; 0x28
    1be6:	a9 a7       	std	Y+41, r26	; 0x29
    1be8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6f a1       	ldd	r22, Y+39	; 0x27
    1bec:	78 a5       	ldd	r23, Y+40	; 0x28
    1bee:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8b a3       	std	Y+35, r24	; 0x23
    1c04:	9c a3       	std	Y+36, r25	; 0x24
    1c06:	ad a3       	std	Y+37, r26	; 0x25
    1c08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_sendCommand+0x176>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9a a3       	std	Y+34, r25	; 0x22
    1c28:	89 a3       	std	Y+33, r24	; 0x21
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c30:	8d a1       	ldd	r24, Y+37	; 0x25
    1c32:	9e a1       	ldd	r25, Y+38	; 0x26
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6f a1       	ldd	r22, Y+39	; 0x27
    1c46:	78 a5       	ldd	r23, Y+40	; 0x28
    1c48:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9a a3       	std	Y+34, r25	; 0x22
    1c6a:	89 a3       	std	Y+33, r24	; 0x21
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_sendCommand+0x1d6>
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	98 a3       	std	Y+32, r25	; 0x20
    1c74:	8f 8f       	std	Y+31, r24	; 0x1f
    1c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c78:	98 a1       	ldd	r25, Y+32	; 0x20
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_sendCommand+0x1c4>
    1c7e:	98 a3       	std	Y+32, r25	; 0x20
    1c80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	89 a1       	ldd	r24, Y+33	; 0x21
    1c84:	9a a1       	ldd	r25, Y+34	; 0x22
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9a a3       	std	Y+34, r25	; 0x22
    1c8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_sendCommand+0x1b8>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6b a1       	ldd	r22, Y+35	; 0x23
    1c98:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	89 a3       	std	Y+33, r24	; 0x21
    1caa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cac:	9a a1       	ldd	r25, Y+34	; 0x22
    1cae:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_sendCommand+0x200>
    1cba:	9e 8f       	std	Y+30, r25	; 0x1e
    1cbc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1cbe:	e5 e3       	ldi	r30, 0x35	; 53
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cc4:	80 83       	st	Z, r24
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	89 8f       	std	Y+25, r24	; 0x19
    1cd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	53 e4       	ldi	r21, 0x43	; 67
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8d 8b       	std	Y+21, r24	; 0x15
    1cf0:	9e 8b       	std	Y+22, r25	; 0x16
    1cf2:	af 8b       	std	Y+23, r26	; 0x17
    1cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_sendCommand+0x262>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1d18:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	69 8d       	ldd	r22, Y+25	; 0x19
    1d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9c 8b       	std	Y+20, r25	; 0x14
    1d56:	8b 8b       	std	Y+19, r24	; 0x13
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_sendCommand+0x2c2>
    1d5a:	89 e1       	ldi	r24, 0x19	; 25
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9a 8b       	std	Y+18, r25	; 0x12
    1d60:	89 8b       	std	Y+17, r24	; 0x11
    1d62:	89 89       	ldd	r24, Y+17	; 0x11
    1d64:	9a 89       	ldd	r25, Y+18	; 0x12
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_sendCommand+0x2b0>
    1d6a:	9a 8b       	std	Y+18, r25	; 0x12
    1d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d70:	9c 89       	ldd	r25, Y+20	; 0x14
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9c 8b       	std	Y+20, r25	; 0x14
    1d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_sendCommand+0x2a4>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6d 89       	ldd	r22, Y+21	; 0x15
    1d84:	7e 89       	ldd	r23, Y+22	; 0x16
    1d86:	8f 89       	ldd	r24, Y+23	; 0x17
    1d88:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	98 8b       	std	Y+16, r25	; 0x10
    1d9c:	8f 87       	std	Y+15, r24	; 0x0f
    1d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da0:	98 89       	ldd	r25, Y+16	; 0x10
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_sendCommand+0x2ec>
    1da6:	98 8b       	std	Y+16, r25	; 0x10
    1da8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1daa:	a2 e3       	ldi	r26, 0x32	; 50
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e2 e3       	ldi	r30, 0x32	; 50
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 77       	andi	r24, 0x7F	; 127
    1db6:	8c 93       	st	X, r24
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	8b 87       	std	Y+11, r24	; 0x0b
    1dc2:	9c 87       	std	Y+12, r25	; 0x0c
    1dc4:	ad 87       	std	Y+13, r26	; 0x0d
    1dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a e7       	ldi	r20, 0x7A	; 122
    1dd6:	53 e4       	ldi	r21, 0x43	; 67
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8f 83       	std	Y+7, r24	; 0x07
    1de2:	98 87       	std	Y+8, r25	; 0x08
    1de4:	a9 87       	std	Y+9, r26	; 0x09
    1de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5f e3       	ldi	r21, 0x3F	; 63
    1df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfc:	88 23       	and	r24, r24
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <LCD_sendCommand+0x354>
		__ticks = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9e 83       	std	Y+6, r25	; 0x06
    1e06:	8d 83       	std	Y+5, r24	; 0x05
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	4c f5       	brge	.+82     	; 0x1e74 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <LCD_sendCommand+0x3b4>
    1e4c:	89 e1       	ldi	r24, 0x19	; 25
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_sendCommand+0x3a2>
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <LCD_sendCommand+0x396>
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	6f 81       	ldd	r22, Y+7	; 0x07
    1e76:	78 85       	ldd	r23, Y+8	; 0x08
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_sendCommand+0x3de>
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1e9c:	e9 96       	adiw	r28, 0x39	; 57
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	e9 97       	sbiw	r28, 0x39	; 57
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1ec4:	a2 e3       	ldi	r26, 0x32	; 50
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e2 e3       	ldi	r30, 0x32	; 50
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 61       	ori	r24, 0x10	; 16
    1ed0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1ed2:	a2 e3       	ldi	r26, 0x32	; 50
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e2 e3       	ldi	r30, 0x32	; 50
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 7d       	andi	r24, 0xDF	; 223
    1ede:	8c 93       	st	X, r24
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e8       	ldi	r26, 0x80	; 128
    1ee6:	bf e3       	ldi	r27, 0x3F	; 63
    1ee8:	8d ab       	std	Y+53, r24	; 0x35
    1eea:	9e ab       	std	Y+54, r25	; 0x36
    1eec:	af ab       	std	Y+55, r26	; 0x37
    1eee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	53 e4       	ldi	r21, 0x43	; 67
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	89 ab       	std	Y+49, r24	; 0x31
    1f0a:	9a ab       	std	Y+50, r25	; 0x32
    1f0c:	ab ab       	std	Y+51, r26	; 0x33
    1f0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f10:	69 a9       	ldd	r22, Y+49	; 0x31
    1f12:	7a a9       	ldd	r23, Y+50	; 0x32
    1f14:	8b a9       	ldd	r24, Y+51	; 0x33
    1f16:	9c a9       	ldd	r25, Y+52	; 0x34
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	98 ab       	std	Y+48, r25	; 0x30
    1f2e:	8f a7       	std	Y+47, r24	; 0x2f
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1f32:	69 a9       	ldd	r22, Y+49	; 0x31
    1f34:	7a a9       	ldd	r23, Y+50	; 0x32
    1f36:	8b a9       	ldd	r24, Y+51	; 0x33
    1f38:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f50:	98 ad       	ldd	r25, Y+56	; 0x38
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	98 ab       	std	Y+48, r25	; 0x30
    1f70:	8f a7       	std	Y+47, r24	; 0x2f
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD_displayCharacter+0xe4>
    1f74:	89 e1       	ldi	r24, 0x19	; 25
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9e a7       	std	Y+46, r25	; 0x2e
    1f7a:	8d a7       	std	Y+45, r24	; 0x2d
    1f7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_displayCharacter+0xd2>
    1f84:	9e a7       	std	Y+46, r25	; 0x2e
    1f86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	98 ab       	std	Y+48, r25	; 0x30
    1f90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f94:	98 a9       	ldd	r25, Y+48	; 0x30
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD_displayCharacter+0xc6>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
    1fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb4:	9c a7       	std	Y+44, r25	; 0x2c
    1fb6:	8b a7       	std	Y+43, r24	; 0x2b
    1fb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_displayCharacter+0x10e>
    1fc0:	9c a7       	std	Y+44, r25	; 0x2c
    1fc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fc4:	a2 e3       	ldi	r26, 0x32	; 50
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e2 e3       	ldi	r30, 0x32	; 50
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	80 68       	ori	r24, 0x80	; 128
    1fd0:	8c 93       	st	X, r24
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 e8       	ldi	r26, 0x80	; 128
    1fd8:	bf e3       	ldi	r27, 0x3F	; 63
    1fda:	8f a3       	std	Y+39, r24	; 0x27
    1fdc:	98 a7       	std	Y+40, r25	; 0x28
    1fde:	a9 a7       	std	Y+41, r26	; 0x29
    1fe0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4a e7       	ldi	r20, 0x7A	; 122
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8b a3       	std	Y+35, r24	; 0x23
    1ffc:	9c a3       	std	Y+36, r25	; 0x24
    1ffe:	ad a3       	std	Y+37, r26	; 0x25
    2000:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2002:	6b a1       	ldd	r22, Y+35	; 0x23
    2004:	7c a1       	ldd	r23, Y+36	; 0x24
    2006:	8d a1       	ldd	r24, Y+37	; 0x25
    2008:	9e a1       	ldd	r25, Y+38	; 0x26
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2016:	88 23       	and	r24, r24
    2018:	2c f4       	brge	.+10     	; 0x2024 <LCD_displayCharacter+0x176>
		__ticks = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9a a3       	std	Y+34, r25	; 0x22
    2020:	89 a3       	std	Y+33, r24	; 0x21
    2022:	3f c0       	rjmp	.+126    	; 0x20a2 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2024:	6b a1       	ldd	r22, Y+35	; 0x23
    2026:	7c a1       	ldd	r23, Y+36	; 0x24
    2028:	8d a1       	ldd	r24, Y+37	; 0x25
    202a:	9e a1       	ldd	r25, Y+38	; 0x26
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	3f ef       	ldi	r19, 0xFF	; 255
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	57 e4       	ldi	r21, 0x47	; 71
    2034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2038:	18 16       	cp	r1, r24
    203a:	4c f5       	brge	.+82     	; 0x208e <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	6f a1       	ldd	r22, Y+39	; 0x27
    203e:	78 a5       	ldd	r23, Y+40	; 0x28
    2040:	89 a5       	ldd	r24, Y+41	; 0x29
    2042:	9a a5       	ldd	r25, Y+42	; 0x2a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e2       	ldi	r20, 0x20	; 32
    204a:	51 e4       	ldi	r21, 0x41	; 65
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <LCD_displayCharacter+0x1d6>
    2066:	89 e1       	ldi	r24, 0x19	; 25
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	98 a3       	std	Y+32, r25	; 0x20
    206c:	8f 8f       	std	Y+31, r24	; 0x1f
    206e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2070:	98 a1       	ldd	r25, Y+32	; 0x20
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_displayCharacter+0x1c4>
    2076:	98 a3       	std	Y+32, r25	; 0x20
    2078:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	89 a1       	ldd	r24, Y+33	; 0x21
    207c:	9a a1       	ldd	r25, Y+34	; 0x22
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9a a3       	std	Y+34, r25	; 0x22
    2082:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	89 a1       	ldd	r24, Y+33	; 0x21
    2086:	9a a1       	ldd	r25, Y+34	; 0x22
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	69 f7       	brne	.-38     	; 0x2066 <LCD_displayCharacter+0x1b8>
    208c:	14 c0       	rjmp	.+40     	; 0x20b6 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	9e 8f       	std	Y+30, r25	; 0x1e
    20a8:	8d 8f       	std	Y+29, r24	; 0x1d
    20aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_displayCharacter+0x200>
    20b2:	9e 8f       	std	Y+30, r25	; 0x1e
    20b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    20b6:	e5 e3       	ldi	r30, 0x35	; 53
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	89 ad       	ldd	r24, Y+57	; 0x39
    20bc:	80 83       	st	Z, r24
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	89 8f       	std	Y+25, r24	; 0x19
    20c8:	9a 8f       	std	Y+26, r25	; 0x1a
    20ca:	ab 8f       	std	Y+27, r26	; 0x1b
    20cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	69 8d       	ldd	r22, Y+25	; 0x19
    20d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	53 e4       	ldi	r21, 0x43	; 67
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8d 8b       	std	Y+21, r24	; 0x15
    20e8:	9e 8b       	std	Y+22, r25	; 0x16
    20ea:	af 8b       	std	Y+23, r26	; 0x17
    20ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_displayCharacter+0x262>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 8b       	std	Y+20, r25	; 0x14
    210c:	8b 8b       	std	Y+19, r24	; 0x13
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2110:	6d 89       	ldd	r22, Y+21	; 0x15
    2112:	7e 89       	ldd	r23, Y+22	; 0x16
    2114:	8f 89       	ldd	r24, Y+23	; 0x17
    2116:	98 8d       	ldd	r25, Y+24	; 0x18
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_displayCharacter+0x2c2>
    2152:	89 e1       	ldi	r24, 0x19	; 25
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a 8b       	std	Y+18, r25	; 0x12
    2158:	89 8b       	std	Y+17, r24	; 0x11
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	9a 89       	ldd	r25, Y+18	; 0x12
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_displayCharacter+0x2b0>
    2162:	9a 8b       	std	Y+18, r25	; 0x12
    2164:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8b 89       	ldd	r24, Y+19	; 0x13
    2172:	9c 89       	ldd	r25, Y+20	; 0x14
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_displayCharacter+0x2a4>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6d 89       	ldd	r22, Y+21	; 0x15
    217c:	7e 89       	ldd	r23, Y+22	; 0x16
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 8d       	ldd	r25, Y+24	; 0x18
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	8b 89       	ldd	r24, Y+19	; 0x13
    2190:	9c 89       	ldd	r25, Y+20	; 0x14
    2192:	98 8b       	std	Y+16, r25	; 0x10
    2194:	8f 87       	std	Y+15, r24	; 0x0f
    2196:	8f 85       	ldd	r24, Y+15	; 0x0f
    2198:	98 89       	ldd	r25, Y+16	; 0x10
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_displayCharacter+0x2ec>
    219e:	98 8b       	std	Y+16, r25	; 0x10
    21a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21a2:	a2 e3       	ldi	r26, 0x32	; 50
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e2 e3       	ldi	r30, 0x32	; 50
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8f 77       	andi	r24, 0x7F	; 127
    21ae:	8c 93       	st	X, r24
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e8       	ldi	r26, 0x80	; 128
    21b6:	bf e3       	ldi	r27, 0x3F	; 63
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	ad 87       	std	Y+13, r26	; 0x0d
    21be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4a e7       	ldi	r20, 0x7A	; 122
    21ce:	53 e4       	ldi	r21, 0x43	; 67
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8f 83       	std	Y+7, r24	; 0x07
    21da:	98 87       	std	Y+8, r25	; 0x08
    21dc:	a9 87       	std	Y+9, r26	; 0x09
    21de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	2c f4       	brge	.+10     	; 0x2202 <LCD_displayCharacter+0x354>
		__ticks = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	3f c0       	rjmp	.+126    	; 0x2280 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2216:	18 16       	cp	r1, r24
    2218:	4c f5       	brge	.+82     	; 0x226c <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <LCD_displayCharacter+0x3b4>
    2244:	89 e1       	ldi	r24, 0x19	; 25
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_displayCharacter+0x3a2>
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	69 f7       	brne	.-38     	; 0x2244 <LCD_displayCharacter+0x396>
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <LCD_displayCharacter+0x3de>
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2294:	e9 96       	adiw	r28, 0x39	; 57
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <LCD_displayString+0x6>
    22ac:	0f 92       	push	r0
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9b 83       	std	Y+3, r25	; 0x03
    22b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22b6:	19 82       	std	Y+1, r1	; 0x01
    22b8:	0e c0       	rjmp	.+28     	; 0x22d6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	80 81       	ld	r24, Z
    22cc:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
		i++;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	8f 5f       	subi	r24, 0xFF	; 255
    22d4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	9b 81       	ldd	r25, Y+3	; 0x03
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	80 81       	ld	r24, Z
    22e8:	88 23       	and	r24, r24
    22ea:	39 f7       	brne	.-50     	; 0x22ba <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <LCD_goToRowColumn+0x6>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <LCD_goToRowColumn+0x8>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	8a 83       	std	Y+2, r24	; 0x02
    2308:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3d 83       	std	Y+5, r19	; 0x05
    2312:	2c 83       	std	Y+4, r18	; 0x04
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	9d 81       	ldd	r25, Y+5	; 0x05
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	91 05       	cpc	r25, r1
    231c:	c1 f0       	breq	.+48     	; 0x234e <LCD_goToRowColumn+0x56>
    231e:	2c 81       	ldd	r18, Y+4	; 0x04
    2320:	3d 81       	ldd	r19, Y+5	; 0x05
    2322:	22 30       	cpi	r18, 0x02	; 2
    2324:	31 05       	cpc	r19, r1
    2326:	2c f4       	brge	.+10     	; 0x2332 <LCD_goToRowColumn+0x3a>
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	61 f0       	breq	.+24     	; 0x2348 <LCD_goToRowColumn+0x50>
    2330:	19 c0       	rjmp	.+50     	; 0x2364 <LCD_goToRowColumn+0x6c>
    2332:	2c 81       	ldd	r18, Y+4	; 0x04
    2334:	3d 81       	ldd	r19, Y+5	; 0x05
    2336:	22 30       	cpi	r18, 0x02	; 2
    2338:	31 05       	cpc	r19, r1
    233a:	69 f0       	breq	.+26     	; 0x2356 <LCD_goToRowColumn+0x5e>
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	9d 81       	ldd	r25, Y+5	; 0x05
    2340:	83 30       	cpi	r24, 0x03	; 3
    2342:	91 05       	cpc	r25, r1
    2344:	61 f0       	breq	.+24     	; 0x235e <LCD_goToRowColumn+0x66>
    2346:	0e c0       	rjmp	.+28     	; 0x2364 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	0b c0       	rjmp	.+22     	; 0x2364 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	80 5c       	subi	r24, 0xC0	; 192
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	80 5f       	subi	r24, 0xF0	; 240
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	80 5b       	subi	r24, 0xB0	; 176
    2362:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	80 68       	ori	r24, 0x80	; 128
    2368:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_sendCommand>
}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <LCD_displayStringRowColumn+0x6>
    2382:	00 d0       	rcall	.+0      	; 0x2384 <LCD_displayStringRowColumn+0x8>
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	6a 83       	std	Y+2, r22	; 0x02
    238c:	5c 83       	std	Y+4, r21	; 0x04
    238e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	6a 81       	ldd	r22, Y+2	; 0x02
    2394:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_displayString>
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	62 97       	sbiw	r28, 0x12	; 18
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    23c6:	89 89       	ldd	r24, Y+17	; 0x11
    23c8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ca:	9e 01       	movw	r18, r28
    23cc:	2f 5f       	subi	r18, 0xFF	; 255
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	b9 01       	movw	r22, r18
    23d2:	4a e0       	ldi	r20, 0x0A	; 10
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <itoa>
   LCD_displayString(buff);
    23da:	ce 01       	movw	r24, r28
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_displayString>
}
    23e2:	62 96       	adiw	r28, 0x12	; 18
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_sendCommand>
}
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <TIMER1_init>:
[Return]: NONE
 -------------------------------------------------------------------------------*/


void TIMER1_init(const TIMER1_ConfigType * Config_Ptr)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <TIMER1_init+0x6>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <TIMER1_init+0x8>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <TIMER1_init+0xa>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr -> mode == OVERFLOW)
    241a:	e9 81       	ldd	r30, Y+1	; 0x01
    241c:	fa 81       	ldd	r31, Y+2	; 0x02
    241e:	80 81       	ld	r24, Z
    2420:	88 23       	and	r24, r24
    2422:	01 f5       	brne	.+64     	; 0x2464 <TIMER1_init+0x5c>
	{
		TCNT1 = Config_Ptr -> initialValue ;
    2424:	ac e4       	ldi	r26, 0x4C	; 76
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e9 81       	ldd	r30, Y+1	; 0x01
    242a:	fa 81       	ldd	r31, Y+2	; 0x02
    242c:	81 81       	ldd	r24, Z+1	; 0x01
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	9c 93       	st	X, r25
    2436:	8e 93       	st	-X, r24
			 * 1. Non PWM mode FOC1A=1 & FOC1A=1
			 * 2. Normal Mode WGM10=0 & WGM11=0 & WGM12=0 & WGM13=0
			 * 3. Normal Mode COM1A/B1=0 & COM1A/B0=0
			 */
		/* Non PWM Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2438:	ef e4       	ldi	r30, 0x4F	; 79
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	8c e0       	ldi	r24, 0x0C	; 12
    243e:	80 83       	st	Z, r24

		/*clock insertion by the configurable structure */
		TCCR1B = (TCCR1B & 0X00) | ((Config_Ptr -> clock & 0X07)) ;
    2440:	ee e4       	ldi	r30, 0x4E	; 78
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	ae e4       	ldi	r26, 0x4E	; 78
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e9 81       	ldd	r30, Y+1	; 0x01
    244c:	fa 81       	ldd	r31, Y+2	; 0x02
    244e:	85 81       	ldd	r24, Z+5	; 0x05
    2450:	87 70       	andi	r24, 0x07	; 7
    2452:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1) ;
    2454:	a9 e5       	ldi	r26, 0x59	; 89
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e9 e5       	ldi	r30, 0x59	; 89
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	84 60       	ori	r24, 0x04	; 4
    2460:	8c 93       	st	X, r24
    2462:	98 c0       	rjmp	.+304    	; 0x2594 <TIMER1_init+0x18c>
	}
	else if(Config_Ptr -> mode == COMPARE_A)
    2464:	e9 81       	ldd	r30, Y+1	; 0x01
    2466:	fa 81       	ldd	r31, Y+2	; 0x02
    2468:	80 81       	ld	r24, Z
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	71 f5       	brne	.+92     	; 0x24ca <TIMER1_init+0xc2>
	{
		TCNT1 = Config_Ptr->initialValue;
    246e:	ac e4       	ldi	r26, 0x4C	; 76
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	11 96       	adiw	r26, 0x01	; 1
    247e:	9c 93       	st	X, r25
    2480:	8e 93       	st	-X, r24
		OCR1A = Config_Ptr->compareValueA;
    2482:	aa e4       	ldi	r26, 0x4A	; 74
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	9c 93       	st	X, r25
    2494:	8e 93       	st	-X, r24
		/* Configure timer0 control register
			 * 1. Non PWM mode FOC1A=1 & FOC1B=1
			 * 2. CTC Mode WGM10=0 & WGM11=0 & WGM12=1 & WGM13=0
			 * 3. No need for OC0 so COM00=0 & COM01=0 , "we'll do so using PWM mode"
		/* Non PWM Mode with*/
		TCCR1A = (1<<FOC1A) | (1<<FOC1B)  ;
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	8c e0       	ldi	r24, 0x0C	; 12
    249c:	80 83       	st	Z, r24

		/*clock insertion by the configurable structure */
		TCCR1B = (TCCR1B & 0X00) | ((Config_Ptr -> clock & 0X07)) | (1<<WGM12) ;
    249e:	ee e4       	ldi	r30, 0x4E	; 78
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	ae e4       	ldi	r26, 0x4E	; 78
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e9 81       	ldd	r30, Y+1	; 0x01
    24aa:	fa 81       	ldd	r31, Y+2	; 0x02
    24ac:	85 81       	ldd	r24, Z+5	; 0x05
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	87 70       	andi	r24, 0x07	; 7
    24b4:	90 70       	andi	r25, 0x00	; 0
    24b6:	88 60       	ori	r24, 0x08	; 8
    24b8:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1A) ; // Enable Timer1 Compare Interrupt
    24ba:	a9 e5       	ldi	r26, 0x59	; 89
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e9 e5       	ldi	r30, 0x59	; 89
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 61       	ori	r24, 0x10	; 16
    24c6:	8c 93       	st	X, r24
    24c8:	65 c0       	rjmp	.+202    	; 0x2594 <TIMER1_init+0x18c>

	}
	else if(Config_Ptr -> mode == COMPARE_B)
    24ca:	e9 81       	ldd	r30, Y+1	; 0x01
    24cc:	fa 81       	ldd	r31, Y+2	; 0x02
    24ce:	80 81       	ld	r24, Z
    24d0:	82 30       	cpi	r24, 0x02	; 2
    24d2:	71 f5       	brne	.+92     	; 0x2530 <TIMER1_init+0x128>
	{
		TCNT1 = Config_Ptr->initialValue;
    24d4:	ac e4       	ldi	r26, 0x4C	; 76
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e9 81       	ldd	r30, Y+1	; 0x01
    24da:	fa 81       	ldd	r31, Y+2	; 0x02
    24dc:	81 81       	ldd	r24, Z+1	; 0x01
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	11 96       	adiw	r26, 0x01	; 1
    24e4:	9c 93       	st	X, r25
    24e6:	8e 93       	st	-X, r24
		OCR1B = Config_Ptr->compareValueB;
    24e8:	a8 e4       	ldi	r26, 0x48	; 72
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e9 81       	ldd	r30, Y+1	; 0x01
    24ee:	fa 81       	ldd	r31, Y+2	; 0x02
    24f0:	83 81       	ldd	r24, Z+3	; 0x03
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	9c 93       	st	X, r25
    24fa:	8e 93       	st	-X, r24
		/* Configure timer0 control register
			 * 1. Non PWM mode FOC1A=1 & FOC1B=1
			 * 2. CTC Mode WGM10=0 & WGM11=0 & WGM12=1 & WGM13=0
			 * 3. No need for OC0 so COM00=0 & COM01=0 , "we'll do so using PWM mode"
		/* Non PWM Mode with*/
		TCCR1A = (1<<FOC1A) | (1<<FOC1B)  ;
    24fc:	ef e4       	ldi	r30, 0x4F	; 79
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	8c e0       	ldi	r24, 0x0C	; 12
    2502:	80 83       	st	Z, r24

		/*clock insertion by the configurable structure */
		TCCR1B = (TCCR1B & 0X00) | ((Config_Ptr -> clock & 0X07)) | (1<<WGM12) ;
    2504:	ee e4       	ldi	r30, 0x4E	; 78
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	ae e4       	ldi	r26, 0x4E	; 78
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e9 81       	ldd	r30, Y+1	; 0x01
    2510:	fa 81       	ldd	r31, Y+2	; 0x02
    2512:	85 81       	ldd	r24, Z+5	; 0x05
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	87 70       	andi	r24, 0x07	; 7
    251a:	90 70       	andi	r25, 0x00	; 0
    251c:	88 60       	ori	r24, 0x08	; 8
    251e:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1B) ; // Enable Timer1 Compare Interrupt
    2520:	a9 e5       	ldi	r26, 0x59	; 89
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e9 e5       	ldi	r30, 0x59	; 89
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	88 60       	ori	r24, 0x08	; 8
    252c:	8c 93       	st	X, r24
    252e:	32 c0       	rjmp	.+100    	; 0x2594 <TIMER1_init+0x18c>
	}
	else if(Config_Ptr -> mode == PWM)
    2530:	e9 81       	ldd	r30, Y+1	; 0x01
    2532:	fa 81       	ldd	r31, Y+2	; 0x02
    2534:	80 81       	ld	r24, Z
    2536:	83 30       	cpi	r24, 0x03	; 3
    2538:	69 f5       	brne	.+90     	; 0x2594 <TIMER1_init+0x18c>
	{
		TCNT1 = Config_Ptr->initialValue;
    253a:	ac e4       	ldi	r26, 0x4C	; 76
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e9 81       	ldd	r30, Y+1	; 0x01
    2540:	fa 81       	ldd	r31, Y+2	; 0x02
    2542:	81 81       	ldd	r24, Z+1	; 0x01
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	11 96       	adiw	r26, 0x01	; 1
    254a:	9c 93       	st	X, r25
    254c:	8e 93       	st	-X, r24
		OCR1A = Config_Ptr->dutyCycle;
    254e:	aa e4       	ldi	r26, 0x4A	; 74
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e9 81       	ldd	r30, Y+1	; 0x01
    2554:	fa 81       	ldd	r31, Y+2	; 0x02
    2556:	84 81       	ldd	r24, Z+4	; 0x04
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	11 96       	adiw	r26, 0x01	; 1
    255e:	9c 93       	st	X, r25
    2560:	8e 93       	st	-X, r24
		 * 1. Fast PWM mode FOC1A=0 & FOC1B=0
		 * 2. Fast PWM Mode WGM10=1 & WGM11=0 & WGM12=1 & WGM13=1
		 * 3. Clear OC1A when match occurs (non inverted mode) COM1A0=0 & COM1A1=1
		 */
		/* PWM Mode with channelA toggling at comparing*/
		TCCR1A = (1<<WGM10) | (WGM11) | (1<<COM1A0) ;
    2562:	ef e4       	ldi	r30, 0x4F	; 79
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	81 e4       	ldi	r24, 0x41	; 65
    2568:	80 83       	st	Z, r24

		/*clock insertion by the configurable structure with Fast PWM Mode */
		TCCR1B = (TCCR1B & 0X00) | ((Config_Ptr -> clock & 0X07)) | (1<<WGM12) | (1<<WGM13) ;
    256a:	ee e4       	ldi	r30, 0x4E	; 78
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	ae e4       	ldi	r26, 0x4E	; 78
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e9 81       	ldd	r30, Y+1	; 0x01
    2576:	fa 81       	ldd	r31, Y+2	; 0x02
    2578:	85 81       	ldd	r24, Z+5	; 0x05
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	87 70       	andi	r24, 0x07	; 7
    2580:	90 70       	andi	r25, 0x00	; 0
    2582:	88 61       	ori	r24, 0x18	; 24
    2584:	8c 93       	st	X, r24

		DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2586:	a7 e3       	ldi	r26, 0x37	; 55
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e7 e3       	ldi	r30, 0x37	; 55
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	8c 93       	st	X, r24

	}


}
    2594:	26 96       	adiw	r28, 0x06	; 6
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <Timer1_OVF_setCallBack>:


void Timer1_OVF_setCallBack(void(*a_ptr)(void))
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <Timer1_OVF_setCallBack+0x6>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_OVF_callBackPtr = a_ptr;
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	90 93 3d 01 	sts	0x013D, r25
    25bc:	80 93 3c 01 	sts	0x013C, r24
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <Timer1_CMPA_setCallBack>:



void Timer1_CMPA_setCallBack(void(*a_ptr)(void))
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <Timer1_CMPA_setCallBack+0x6>
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_CMPA_callBackPtr = a_ptr;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	90 93 3f 01 	sts	0x013F, r25
    25e0:	80 93 3e 01 	sts	0x013E, r24
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <Timer1_CMPB_setCallBack>:

void Timer1_CMPB_setCallBack(void(*a_ptr)(void))
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <Timer1_CMPB_setCallBack+0x6>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_CMPB_callBackPtr = a_ptr;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	90 93 41 01 	sts	0x0141, r25
    2604:	80 93 40 01 	sts	0x0140, r24
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <Timer1_DeInit>:


void Timer1_DeInit(void)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    261a:	ec e4       	ldi	r30, 0x4C	; 76
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	11 82       	std	Z+1, r1	; 0x01
    2620:	10 82       	st	Z, r1
	TCCR1A=0;
    2622:	ef e4       	ldi	r30, 0x4F	; 79
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	10 82       	st	Z, r1
	TCCR1B=0;
    2628:	ee e4       	ldi	r30, 0x4E	; 78
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);    // Disable Overflow INT
    262e:	a9 e5       	ldi	r26, 0x59	; 89
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e9 e5       	ldi	r30, 0x59	; 89
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	8b 7f       	andi	r24, 0xFB	; 251
    263a:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,OCIE1A);   // Disable Timer1 Compare Interrupt
    263c:	a9 e5       	ldi	r26, 0x59	; 89
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e9 e5       	ldi	r30, 0x59	; 89
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8f 7e       	andi	r24, 0xEF	; 239
    2648:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,OCIE1B);   // Disable Timer1 Compare Interrupt
    264a:	a9 e5       	ldi	r26, 0x59	; 89
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e9 e5       	ldi	r30, 0x59	; 89
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	87 7f       	andi	r24, 0xF7	; 247
    2656:	8c 93       	st	X, r24
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <__vector_8>:




ISR(TIMER1_OVF_vect)
{
    265e:	1f 92       	push	r1
    2660:	0f 92       	push	r0
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	0f 92       	push	r0
    2666:	11 24       	eor	r1, r1
    2668:	2f 93       	push	r18
    266a:	3f 93       	push	r19
    266c:	4f 93       	push	r20
    266e:	5f 93       	push	r21
    2670:	6f 93       	push	r22
    2672:	7f 93       	push	r23
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	ef 93       	push	r30
    267e:	ff 93       	push	r31
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	if(g_OVF_callBackPtr != NULL_PTR)
    2688:	80 91 3c 01 	lds	r24, 0x013C
    268c:	90 91 3d 01 	lds	r25, 0x013D
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	29 f0       	breq	.+10     	; 0x269e <__vector_8+0x40>
	{
		(*g_OVF_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr_OVF(); */
    2694:	e0 91 3c 01 	lds	r30, 0x013C
    2698:	f0 91 3d 01 	lds	r31, 0x013D
    269c:	09 95       	icall
	}
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	ff 91       	pop	r31
    26a4:	ef 91       	pop	r30
    26a6:	bf 91       	pop	r27
    26a8:	af 91       	pop	r26
    26aa:	9f 91       	pop	r25
    26ac:	8f 91       	pop	r24
    26ae:	7f 91       	pop	r23
    26b0:	6f 91       	pop	r22
    26b2:	5f 91       	pop	r21
    26b4:	4f 91       	pop	r20
    26b6:	3f 91       	pop	r19
    26b8:	2f 91       	pop	r18
    26ba:	0f 90       	pop	r0
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	0f 90       	pop	r0
    26c0:	1f 90       	pop	r1
    26c2:	18 95       	reti

000026c4 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    26c4:	1f 92       	push	r1
    26c6:	0f 92       	push	r0
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	0f 92       	push	r0
    26cc:	11 24       	eor	r1, r1
    26ce:	2f 93       	push	r18
    26d0:	3f 93       	push	r19
    26d2:	4f 93       	push	r20
    26d4:	5f 93       	push	r21
    26d6:	6f 93       	push	r22
    26d8:	7f 93       	push	r23
    26da:	8f 93       	push	r24
    26dc:	9f 93       	push	r25
    26de:	af 93       	push	r26
    26e0:	bf 93       	push	r27
    26e2:	ef 93       	push	r30
    26e4:	ff 93       	push	r31
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	if(g_CMPA_callBackPtr != NULL_PTR)
    26ee:	80 91 3e 01 	lds	r24, 0x013E
    26f2:	90 91 3f 01 	lds	r25, 0x013F
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	29 f0       	breq	.+10     	; 0x2704 <__vector_6+0x40>
	{
		(*g_CMPA_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr_CMP(); */
    26fa:	e0 91 3e 01 	lds	r30, 0x013E
    26fe:	f0 91 3f 01 	lds	r31, 0x013F
    2702:	09 95       	icall
	}
}
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	ff 91       	pop	r31
    270a:	ef 91       	pop	r30
    270c:	bf 91       	pop	r27
    270e:	af 91       	pop	r26
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	7f 91       	pop	r23
    2716:	6f 91       	pop	r22
    2718:	5f 91       	pop	r21
    271a:	4f 91       	pop	r20
    271c:	3f 91       	pop	r19
    271e:	2f 91       	pop	r18
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	0f 90       	pop	r0
    2726:	1f 90       	pop	r1
    2728:	18 95       	reti

0000272a <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    272a:	1f 92       	push	r1
    272c:	0f 92       	push	r0
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	0f 92       	push	r0
    2732:	11 24       	eor	r1, r1
    2734:	2f 93       	push	r18
    2736:	3f 93       	push	r19
    2738:	4f 93       	push	r20
    273a:	5f 93       	push	r21
    273c:	6f 93       	push	r22
    273e:	7f 93       	push	r23
    2740:	8f 93       	push	r24
    2742:	9f 93       	push	r25
    2744:	af 93       	push	r26
    2746:	bf 93       	push	r27
    2748:	ef 93       	push	r30
    274a:	ff 93       	push	r31
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	if(g_CMPB_callBackPtr != NULL_PTR)
    2754:	80 91 40 01 	lds	r24, 0x0140
    2758:	90 91 41 01 	lds	r25, 0x0141
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	29 f0       	breq	.+10     	; 0x276a <__vector_7+0x40>
	{
		(*g_CMPB_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr_CMP(); */
    2760:	e0 91 40 01 	lds	r30, 0x0140
    2764:	f0 91 41 01 	lds	r31, 0x0141
    2768:	09 95       	icall
	}
}
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	ff 91       	pop	r31
    2770:	ef 91       	pop	r30
    2772:	bf 91       	pop	r27
    2774:	af 91       	pop	r26
    2776:	9f 91       	pop	r25
    2778:	8f 91       	pop	r24
    277a:	7f 91       	pop	r23
    277c:	6f 91       	pop	r22
    277e:	5f 91       	pop	r21
    2780:	4f 91       	pop	r20
    2782:	3f 91       	pop	r19
    2784:	2f 91       	pop	r18
    2786:	0f 90       	pop	r0
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	0f 90       	pop	r0
    278c:	1f 90       	pop	r1
    278e:	18 95       	reti

00002790 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	00 d0       	rcall	.+0      	; 0x2796 <UART_init+0x6>
    2796:	00 d0       	rcall	.+0      	; 0x2798 <UART_init+0x8>
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	9c 83       	std	Y+4, r25	; 0x04
    279e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 BAUD_PRESCALE = (((F_CPU / (Config_Ptr->BaudRate * 8UL))) - 1);
    27a0:	eb 81       	ldd	r30, Y+3	; 0x03
    27a2:	fc 81       	ldd	r31, Y+4	; 0x04
    27a4:	81 81       	ldd	r24, Z+1	; 0x01
    27a6:	92 81       	ldd	r25, Z+2	; 0x02
    27a8:	cc 01       	movw	r24, r24
    27aa:	a0 e0       	ldi	r26, 0x00	; 0
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	aa 1f       	adc	r26, r26
    27b4:	bb 1f       	adc	r27, r27
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	aa 1f       	adc	r26, r26
    27c4:	bb 1f       	adc	r27, r27
    27c6:	9c 01       	movw	r18, r24
    27c8:	ad 01       	movw	r20, r26
    27ca:	80 e4       	ldi	r24, 0x40	; 64
    27cc:	92 e4       	ldi	r25, 0x42	; 66
    27ce:	af e0       	ldi	r26, 0x0F	; 15
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__udivmodsi4>
    27da:	da 01       	movw	r26, r20
    27dc:	c9 01       	movw	r24, r18
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    27e4:	eb e2       	ldi	r30, 0x2B	; 43
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	82 e0       	ldi	r24, 0x02	; 2
    27ea:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    27ec:	ea e2       	ldi	r30, 0x2A	; 42
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	88 e1       	ldi	r24, 0x18	; 24
    27f2:	80 83       	st	Z, r24
	
	if (Config_Ptr->NumOfDataBits == 6)
    27f4:	eb 81       	ldd	r30, Y+3	; 0x03
    27f6:	fc 81       	ldd	r31, Y+4	; 0x04
    27f8:	80 81       	ld	r24, Z
    27fa:	86 30       	cpi	r24, 0x06	; 6
    27fc:	41 f4       	brne	.+16     	; 0x280e <UART_init+0x7e>
	{
		SET_BIT(UCSRC,UCSZ0);
    27fe:	a0 e4       	ldi	r26, 0x40	; 64
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e0 e4       	ldi	r30, 0x40	; 64
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	82 60       	ori	r24, 0x02	; 2
    280a:	8c 93       	st	X, r24
    280c:	3b c0       	rjmp	.+118    	; 0x2884 <UART_init+0xf4>
	}
	else if (Config_Ptr->NumOfDataBits == 7)
    280e:	eb 81       	ldd	r30, Y+3	; 0x03
    2810:	fc 81       	ldd	r31, Y+4	; 0x04
    2812:	80 81       	ld	r24, Z
    2814:	87 30       	cpi	r24, 0x07	; 7
    2816:	41 f4       	brne	.+16     	; 0x2828 <UART_init+0x98>
	{
		SET_BIT(UCSRC,UCSZ1);
    2818:	a0 e4       	ldi	r26, 0x40	; 64
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e0 e4       	ldi	r30, 0x40	; 64
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	84 60       	ori	r24, 0x04	; 4
    2824:	8c 93       	st	X, r24
    2826:	2e c0       	rjmp	.+92     	; 0x2884 <UART_init+0xf4>
	}
	else if (Config_Ptr->NumOfDataBits == 8)
    2828:	eb 81       	ldd	r30, Y+3	; 0x03
    282a:	fc 81       	ldd	r31, Y+4	; 0x04
    282c:	80 81       	ld	r24, Z
    282e:	88 30       	cpi	r24, 0x08	; 8
    2830:	79 f4       	brne	.+30     	; 0x2850 <UART_init+0xc0>
	{
		SET_BIT(UCSRC,UCSZ0);
    2832:	a0 e4       	ldi	r26, 0x40	; 64
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e0 e4       	ldi	r30, 0x40	; 64
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	82 60       	ori	r24, 0x02	; 2
    283e:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2840:	a0 e4       	ldi	r26, 0x40	; 64
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e0 e4       	ldi	r30, 0x40	; 64
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	84 60       	ori	r24, 0x04	; 4
    284c:	8c 93       	st	X, r24
    284e:	1a c0       	rjmp	.+52     	; 0x2884 <UART_init+0xf4>
	}
	else if (Config_Ptr->NumOfDataBits == 9)
    2850:	eb 81       	ldd	r30, Y+3	; 0x03
    2852:	fc 81       	ldd	r31, Y+4	; 0x04
    2854:	80 81       	ld	r24, Z
    2856:	89 30       	cpi	r24, 0x09	; 9
    2858:	a9 f4       	brne	.+42     	; 0x2884 <UART_init+0xf4>
	{
		SET_BIT(UCSRB,UCSZ2);
    285a:	aa e2       	ldi	r26, 0x2A	; 42
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	ea e2       	ldi	r30, 0x2A	; 42
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	84 60       	ori	r24, 0x04	; 4
    2866:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2868:	a0 e4       	ldi	r26, 0x40	; 64
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e0 e4       	ldi	r30, 0x40	; 64
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	84 60       	ori	r24, 0x04	; 4
    2874:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    2876:	a0 e4       	ldi	r26, 0x40	; 64
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e0 e4       	ldi	r30, 0x40	; 64
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	82 60       	ori	r24, 0x02	; 2
    2882:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);
    2884:	a0 e4       	ldi	r26, 0x40	; 64
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e0 e4       	ldi	r30, 0x40	; 64
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	80 68       	ori	r24, 0x80	; 128
    2890:	8c 93       	st	X, r24
	
	if (Config_Ptr->ParityType == EVEN)
    2892:	eb 81       	ldd	r30, Y+3	; 0x03
    2894:	fc 81       	ldd	r31, Y+4	; 0x04
    2896:	83 81       	ldd	r24, Z+3	; 0x03
    2898:	88 23       	and	r24, r24
    289a:	41 f4       	brne	.+16     	; 0x28ac <UART_init+0x11c>
	{
		SET_BIT(UCSRC,UPM1);
    289c:	a0 e4       	ldi	r26, 0x40	; 64
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e0 e4       	ldi	r30, 0x40	; 64
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	80 62       	ori	r24, 0x20	; 32
    28a8:	8c 93       	st	X, r24
    28aa:	27 c0       	rjmp	.+78     	; 0x28fa <UART_init+0x16a>
	}
	else if (Config_Ptr->ParityType == ODD)
    28ac:	eb 81       	ldd	r30, Y+3	; 0x03
    28ae:	fc 81       	ldd	r31, Y+4	; 0x04
    28b0:	83 81       	ldd	r24, Z+3	; 0x03
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	79 f4       	brne	.+30     	; 0x28d4 <UART_init+0x144>
	{
		SET_BIT(UCSRC,UPM1);
    28b6:	a0 e4       	ldi	r26, 0x40	; 64
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e0 e4       	ldi	r30, 0x40	; 64
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	80 62       	ori	r24, 0x20	; 32
    28c2:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM0);
    28c4:	a0 e4       	ldi	r26, 0x40	; 64
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e0 e4       	ldi	r30, 0x40	; 64
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	80 61       	ori	r24, 0x10	; 16
    28d0:	8c 93       	st	X, r24
    28d2:	13 c0       	rjmp	.+38     	; 0x28fa <UART_init+0x16a>
	}
	else if (Config_Ptr->ParityType == DISABLED)
    28d4:	eb 81       	ldd	r30, Y+3	; 0x03
    28d6:	fc 81       	ldd	r31, Y+4	; 0x04
    28d8:	83 81       	ldd	r24, Z+3	; 0x03
    28da:	82 30       	cpi	r24, 0x02	; 2
    28dc:	71 f4       	brne	.+28     	; 0x28fa <UART_init+0x16a>
	{
		CLEAR_BIT(UCSRC,UPM1);
    28de:	a0 e4       	ldi	r26, 0x40	; 64
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e0 e4       	ldi	r30, 0x40	; 64
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8f 7d       	andi	r24, 0xDF	; 223
    28ea:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM0);
    28ec:	a0 e4       	ldi	r26, 0x40	; 64
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e0 e4       	ldi	r30, 0x40	; 64
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	8f 7e       	andi	r24, 0xEF	; 239
    28f8:	8c 93       	st	X, r24
	}


	if (Config_Ptr->StopBitsNum == TWO_STOP_BIT)
    28fa:	eb 81       	ldd	r30, Y+3	; 0x03
    28fc:	fc 81       	ldd	r31, Y+4	; 0x04
    28fe:	84 81       	ldd	r24, Z+4	; 0x04
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	41 f4       	brne	.+16     	; 0x2914 <UART_init+0x184>
	{
		SET_BIT(UCSRC,USBS);
    2904:	a0 e4       	ldi	r26, 0x40	; 64
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e0 e4       	ldi	r30, 0x40	; 64
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	88 60       	ori	r24, 0x08	; 8
    2910:	8c 93       	st	X, r24
    2912:	0c c0       	rjmp	.+24     	; 0x292c <UART_init+0x19c>
	}
	else if (Config_Ptr->StopBitsNum == ONE_STOP_BIT)
    2914:	eb 81       	ldd	r30, Y+3	; 0x03
    2916:	fc 81       	ldd	r31, Y+4	; 0x04
    2918:	84 81       	ldd	r24, Z+4	; 0x04
    291a:	88 23       	and	r24, r24
    291c:	39 f4       	brne	.+14     	; 0x292c <UART_init+0x19c>
	{
		CLEAR_BIT(UCSRC,USBS);
    291e:	a0 e4       	ldi	r26, 0x40	; 64
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e0 e4       	ldi	r30, 0x40	; 64
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	87 7f       	andi	r24, 0xF7	; 247
    292a:	8c 93       	st	X, r24
	}


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    292c:	e0 e4       	ldi	r30, 0x40	; 64
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	89 2f       	mov	r24, r25
    2936:	99 27       	eor	r25, r25
    2938:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    293a:	e9 e2       	ldi	r30, 0x29	; 41
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	80 83       	st	Z, r24
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	0f 92       	push	r0
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    295c:	eb e2       	ldi	r30, 0x2B	; 43
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	80 72       	andi	r24, 0x20	; 32
    2968:	90 70       	andi	r25, 0x00	; 0
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	b9 f3       	breq	.-18     	; 0x295c <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    296e:	ec e2       	ldi	r30, 0x2C	; 44
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2986:	eb e2       	ldi	r30, 0x2B	; 43
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	88 23       	and	r24, r24
    298e:	dc f7       	brge	.-10     	; 0x2986 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2990:	ec e2       	ldi	r30, 0x2C	; 44
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
}
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <UART_sendString+0x6>
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29ac:	19 82       	std	Y+1, r1	; 0x01
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ba:	fc 01       	movw	r30, r24
    29bc:	e2 0f       	add	r30, r18
    29be:	f3 1f       	adc	r31, r19
    29c0:	80 81       	ld	r24, Z
    29c2:	0e 94 a8 14 	call	0x2950	; 0x2950 <UART_sendByte>
		i++;
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	8f 5f       	subi	r24, 0xFF	; 255
    29ca:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	9b 81       	ldd	r25, Y+3	; 0x03
    29d6:	fc 01       	movw	r30, r24
    29d8:	e2 0f       	add	r30, r18
    29da:	f3 1f       	adc	r31, r19
    29dc:	80 81       	ld	r24, Z
    29de:	88 23       	and	r24, r24
    29e0:	39 f7       	brne	.-50     	; 0x29b0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <UART_receiveString+0xa>
    29f8:	0f 92       	push	r0
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9b 83       	std	Y+3, r25	; 0x03
    2a00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a02:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0e:	8c 01       	movw	r16, r24
    2a10:	02 0f       	add	r16, r18
    2a12:	13 1f       	adc	r17, r19
    2a14:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
    2a18:	f8 01       	movw	r30, r16
    2a1a:	80 83       	st	Z, r24
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	8f 5f       	subi	r24, 0xFF	; 255
    2a22:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2e:	8c 01       	movw	r16, r24
    2a30:	02 0f       	add	r16, r18
    2a32:	13 1f       	adc	r17, r19
    2a34:	0e 94 bf 14 	call	0x297e	; 0x297e <UART_recieveByte>
    2a38:	f8 01       	movw	r30, r16
    2a3a:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	fc 01       	movw	r30, r24
    2a48:	e2 0f       	add	r30, r18
    2a4a:	f3 1f       	adc	r31, r19
    2a4c:	80 81       	ld	r24, Z
    2a4e:	83 32       	cpi	r24, 0x23	; 35
    2a50:	31 f7       	brne	.-52     	; 0x2a1e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	e2 0f       	add	r30, r18
    2a60:	f3 1f       	adc	r31, r19
    2a62:	10 82       	st	Z, r1
}
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <__udivmodsi4>:
    2a74:	a1 e2       	ldi	r26, 0x21	; 33
    2a76:	1a 2e       	mov	r1, r26
    2a78:	aa 1b       	sub	r26, r26
    2a7a:	bb 1b       	sub	r27, r27
    2a7c:	fd 01       	movw	r30, r26
    2a7e:	0d c0       	rjmp	.+26     	; 0x2a9a <__udivmodsi4_ep>

00002a80 <__udivmodsi4_loop>:
    2a80:	aa 1f       	adc	r26, r26
    2a82:	bb 1f       	adc	r27, r27
    2a84:	ee 1f       	adc	r30, r30
    2a86:	ff 1f       	adc	r31, r31
    2a88:	a2 17       	cp	r26, r18
    2a8a:	b3 07       	cpc	r27, r19
    2a8c:	e4 07       	cpc	r30, r20
    2a8e:	f5 07       	cpc	r31, r21
    2a90:	20 f0       	brcs	.+8      	; 0x2a9a <__udivmodsi4_ep>
    2a92:	a2 1b       	sub	r26, r18
    2a94:	b3 0b       	sbc	r27, r19
    2a96:	e4 0b       	sbc	r30, r20
    2a98:	f5 0b       	sbc	r31, r21

00002a9a <__udivmodsi4_ep>:
    2a9a:	66 1f       	adc	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	1a 94       	dec	r1
    2aa4:	69 f7       	brne	.-38     	; 0x2a80 <__udivmodsi4_loop>
    2aa6:	60 95       	com	r22
    2aa8:	70 95       	com	r23
    2aaa:	80 95       	com	r24
    2aac:	90 95       	com	r25
    2aae:	9b 01       	movw	r18, r22
    2ab0:	ac 01       	movw	r20, r24
    2ab2:	bd 01       	movw	r22, r26
    2ab4:	cf 01       	movw	r24, r30
    2ab6:	08 95       	ret

00002ab8 <__prologue_saves__>:
    2ab8:	2f 92       	push	r2
    2aba:	3f 92       	push	r3
    2abc:	4f 92       	push	r4
    2abe:	5f 92       	push	r5
    2ac0:	6f 92       	push	r6
    2ac2:	7f 92       	push	r7
    2ac4:	8f 92       	push	r8
    2ac6:	9f 92       	push	r9
    2ac8:	af 92       	push	r10
    2aca:	bf 92       	push	r11
    2acc:	cf 92       	push	r12
    2ace:	df 92       	push	r13
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	ca 1b       	sub	r28, r26
    2ae2:	db 0b       	sbc	r29, r27
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	09 94       	ijmp

00002af0 <__epilogue_restores__>:
    2af0:	2a 88       	ldd	r2, Y+18	; 0x12
    2af2:	39 88       	ldd	r3, Y+17	; 0x11
    2af4:	48 88       	ldd	r4, Y+16	; 0x10
    2af6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2afa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2afc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2afe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b00:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b02:	b9 84       	ldd	r11, Y+9	; 0x09
    2b04:	c8 84       	ldd	r12, Y+8	; 0x08
    2b06:	df 80       	ldd	r13, Y+7	; 0x07
    2b08:	ee 80       	ldd	r14, Y+6	; 0x06
    2b0a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b0c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b0e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b10:	aa 81       	ldd	r26, Y+2	; 0x02
    2b12:	b9 81       	ldd	r27, Y+1	; 0x01
    2b14:	ce 0f       	add	r28, r30
    2b16:	d1 1d       	adc	r29, r1
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	ed 01       	movw	r28, r26
    2b24:	08 95       	ret

00002b26 <itoa>:
    2b26:	fb 01       	movw	r30, r22
    2b28:	9f 01       	movw	r18, r30
    2b2a:	e8 94       	clt
    2b2c:	42 30       	cpi	r20, 0x02	; 2
    2b2e:	c4 f0       	brlt	.+48     	; 0x2b60 <itoa+0x3a>
    2b30:	45 32       	cpi	r20, 0x25	; 37
    2b32:	b4 f4       	brge	.+44     	; 0x2b60 <itoa+0x3a>
    2b34:	4a 30       	cpi	r20, 0x0A	; 10
    2b36:	29 f4       	brne	.+10     	; 0x2b42 <itoa+0x1c>
    2b38:	97 fb       	bst	r25, 7
    2b3a:	1e f4       	brtc	.+6      	; 0x2b42 <itoa+0x1c>
    2b3c:	90 95       	com	r25
    2b3e:	81 95       	neg	r24
    2b40:	9f 4f       	sbci	r25, 0xFF	; 255
    2b42:	64 2f       	mov	r22, r20
    2b44:	77 27       	eor	r23, r23
    2b46:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    2b4a:	80 5d       	subi	r24, 0xD0	; 208
    2b4c:	8a 33       	cpi	r24, 0x3A	; 58
    2b4e:	0c f0       	brlt	.+2      	; 0x2b52 <itoa+0x2c>
    2b50:	89 5d       	subi	r24, 0xD9	; 217
    2b52:	81 93       	st	Z+, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	a1 f7       	brne	.-24     	; 0x2b42 <itoa+0x1c>
    2b5a:	16 f4       	brtc	.+4      	; 0x2b60 <itoa+0x3a>
    2b5c:	5d e2       	ldi	r21, 0x2D	; 45
    2b5e:	51 93       	st	Z+, r21
    2b60:	10 82       	st	Z, r1
    2b62:	c9 01       	movw	r24, r18
    2b64:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <strrev>

00002b68 <strrev>:
    2b68:	dc 01       	movw	r26, r24
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	67 2f       	mov	r22, r23
    2b6e:	71 91       	ld	r23, Z+
    2b70:	77 23       	and	r23, r23
    2b72:	e1 f7       	brne	.-8      	; 0x2b6c <strrev+0x4>
    2b74:	32 97       	sbiw	r30, 0x02	; 2
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <strrev+0x18>
    2b78:	7c 91       	ld	r23, X
    2b7a:	6d 93       	st	X+, r22
    2b7c:	70 83       	st	Z, r23
    2b7e:	62 91       	ld	r22, -Z
    2b80:	ae 17       	cp	r26, r30
    2b82:	bf 07       	cpc	r27, r31
    2b84:	c8 f3       	brcs	.-14     	; 0x2b78 <strrev+0x10>
    2b86:	08 95       	ret

00002b88 <__udivmodhi4>:
    2b88:	aa 1b       	sub	r26, r26
    2b8a:	bb 1b       	sub	r27, r27
    2b8c:	51 e1       	ldi	r21, 0x11	; 17
    2b8e:	07 c0       	rjmp	.+14     	; 0x2b9e <__udivmodhi4_ep>

00002b90 <__udivmodhi4_loop>:
    2b90:	aa 1f       	adc	r26, r26
    2b92:	bb 1f       	adc	r27, r27
    2b94:	a6 17       	cp	r26, r22
    2b96:	b7 07       	cpc	r27, r23
    2b98:	10 f0       	brcs	.+4      	; 0x2b9e <__udivmodhi4_ep>
    2b9a:	a6 1b       	sub	r26, r22
    2b9c:	b7 0b       	sbc	r27, r23

00002b9e <__udivmodhi4_ep>:
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	5a 95       	dec	r21
    2ba4:	a9 f7       	brne	.-22     	; 0x2b90 <__udivmodhi4_loop>
    2ba6:	80 95       	com	r24
    2ba8:	90 95       	com	r25
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	08 95       	ret

00002bb0 <_exit>:
    2bb0:	f8 94       	cli

00002bb2 <__stop_program>:
    2bb2:	ff cf       	rjmp	.-2      	; 0x2bb2 <__stop_program>
